#!/bin/bash
NC='\033[0m' 		# RESET color
RED='\033[0;31m'	# RED color
GREEN='\033[0;32m'	# GREEN color
BLUE='\033[0;34m'	# BLUE color
YELLOW='\033[0;33m'	# YELLOW color

I_MATIK_PATH=$(cd `dirname $0` && pwd)
git pull 2>/dev/null
source $I_MATIK_PATH/support/i-matik/config/i-matik
source $INSTAL_CHECK
VERSIONS_NR="0.94.9(f33.1)(i09.3)"
ln -s $CREATE_BOXES $I_MATIK_PATH/my-boxes_please_edit_me 2>/dev/null
source $I_MATIK_PATH/support/freetz/scripts/friends 2>/dev/null

#arm boxen
if [[ $1 == '68504g.11' ]]; then
source $I_MATIK
elif [[ $1 == '68504g.30' ]]; then
source $I_MATIK
elif [[ $1 == '68504g.35' ]]; then
source $I_MATIK
elif [[ $1 == '68504g.multi' ]]; then
source $SSL11
elif [[ $1 == '68504g' ]] && [[ $2 == '-push' ]]; then
source $SSL11_PUSH

elif [[ $1 == '68505g.11' ]]; then
source $I_MATIK
elif [[ $1 == '68505g.30' ]]; then
source $I_MATIK
elif [[ $1 == '68505g.35' ]]; then
source $I_MATIK
elif [[ $1 == '68505g.multi' ]]; then
source $SSL11
elif [[ $1 == '68505g' ]] && [[ $2 == '-push' ]]; then
source $SSL11_PUSH

elif [[ $1 == '7520.11' ]]; then
printf ${RED}"No support, please use 30 for this\n"
elif [[ $1 == '7520.30' ]]; then
source $I_MATIK
elif [[ $1 == '7520.35' ]]; then
source $I_MATIK
elif [[ $1 == '7520.multi' ]]; then
source $SSL11
elif [[ $1 == '7520' ]] && [[ $2 == '-push' ]]; then
source $SSL30_PUSH

elif [[ $1 == '7520B.11' ]]; then
printf ${RED}"No support, please use 30 for this\n"
elif [[ $1 == '7520B.30' ]]; then
source $I_MATIK
elif [[ $1 == '7520B.35' ]]; then
source $I_MATIK
elif [[ $1 == '7520B.multi' ]]; then
source $SSL11
elif [[ $1 == '7520B' ]] && [[ $2 == '-push' ]]; then
source $SSL30_PUSH

elif [[ $1 == '7520-Alien7530.11' ]]; then
printf ${RED}"No support, please use 30 for this\n"
elif [[ $1 == '7520-Alien7530.30' ]]; then
source $I_MATIK
elif [[ $1 == '7520-Alien7530.35' ]]; then
source $I_MATIK
elif [[ $1 == '7520-Alien7530.multi' ]]; then
source $I_MATIK
elif [[ $1 == '7520-Alien7530' ]] && [[ $2 == '-push' ]]; then
source $SSL30_PUSH

elif [[ $1 == '7530.11' ]]; then
printf ${RED}"No support, please use 30 for this\n"
elif [[ $1 == '7530.30' ]]; then
source $I_MATIK
elif [[ $1 == '7530.35' ]]; then
source $I_MATIK
elif [[ $1 == '7530.multi' ]]; then
source $SSL11
elif [[ $1 == '7530' ]] && [[ $2 == '-push' ]]; then
source $SSL30_PUSH

#arm boxen no inmemory
elif [[ $1 == '4040.11' ]]; then
printf ${RED}"No support, please use 30 for this\n"
elif [[ $1 == '4040.30' ]]; then
source $NO_INMEMORY
elif [[ $1 == '4040.35' ]]; then
source $NO_INMEMORY
elif [[ $1 == '4040.multi' ]]; then
source $SSL11
elif [[ $1 == '4040' ]] && [[ $2 == '-push' ]]; then
source $SSL30_PUSH

#elif [[ $1 == '4050.11' ]]; then
#source $NO_INMEMORY
elif [[ $1 == '4050.30' ]]; then
source $NO_INMEMORY
elif [[ $1 == '4050.35' ]]; then
source $NO_INMEMORY
elif [[ $1 == '4050.multi' ]]; then
source $SSL30
elif [[ $1 == '4050' ]] && [[ $2 == '-push' ]]; then
source $SSL30_PUSH

elif [[ $1 == '4060.11' ]]; then
source $NO_INMEMORY
elif [[ $1 == '4060.30' ]]; then
source $NO_INMEMORY
elif [[ $1 == '4060.35' ]]; then
source $NO_INMEMORY
elif [[ $1 == '4060.multi' ]]; then
source $SSL11
elif [[ $1 == '4060' ]] && [[ $2 == '-push' ]]; then
source $SSL30_PUSH

elif [[ $1 == '4690.11' ]]; then
printf ${RED}"No support, please use 30 for this\n"
elif [[ $1 == '4690.30' ]]; then
source $NO_INMEMORY
elif [[ $1 == '4690.35' ]]; then
source $NO_INMEMORY
elif [[ $1 == '4690.multi' ]]; then
source $SSL30
elif [[ $1 == '4690' ]] && [[ $2 == '-push' ]]; then
source $SSL30_PUSH

elif [[ $1 == '5590.11' ]]; then
printf ${RED}"No support, please use 30 for this\n"
elif [[ $1 == '5590.30' ]]; then
source $NO_INMEMORY
elif [[ $1 == '5590.35' ]]; then
source $NO_INMEMORY
elif [[ $1 == '5590.multi' ]]; then
source $SSL11
elif [[ $1 == '5590' ]] && [[ $2 == '-push' ]]; then
source $SSL30_PUSH

elif [[ $1 == '5690.11' ]]; then
printf ${RED}"No support, please use 30 for this\n"
elif [[ $1 == '5690.30' ]]; then
source $NO_INMEMORY
elif [[ $1 == '5690.35' ]]; then
source $NO_INMEMORY
elif [[ $1 == '5690.multi' ]]; then
source $SSL30
elif [[ $1 == '5690' ]] && [[ $2 == '-push' ]]; then
source $SSL30_PUSH

elif [[ $1 == '5690Pro.11' ]]; then
printf ${RED}"No support, please use 30 for this\n"
elif [[ $1 == '5690Pro.30' ]]; then
source $NO_INMEMORY
elif [[ $1 == '5690Pro.35' ]]; then
source $NO_INMEMORY
elif [[ $1 == '5690Pro.multi' ]]; then
source $SSL30
elif [[ $1 == '5690Pro' ]] && [[ $2 == '-push' ]]; then
source $SSL30_PUSH

elif [[ $1 == '7510.11' ]]; then
printf ${RED}"No support, please use 30 for this\n"
elif [[ $1 == '7510.30' ]]; then
source $NO_INMEMORY
elif [[ $1 == '7510.35' ]]; then
source $NO_INMEMORY
elif [[ $1 == '7510.multi' ]]; then
source $SSL11
elif [[ $1 == '7510' ]] && [[ $2 == '-push' ]]; then
source $SSL30_PUSH

elif [[ $1 == '7530AX.11' ]]; then
printf ${RED}"No support, please use 30 for this\n"
elif [[ $1 == '7530AX.30' ]]; then
source $NO_INMEMORY
elif [[ $1 == '7530AX.35' ]]; then
source $NO_INMEMORY
elif [[ $1 == '7530AX.multi' ]]; then
source $SSL11
elif [[ $1 == '7530AX' ]] && [[ $2 == '-push' ]]; then
source $SSL30_PUSH

elif [[ $1 == '7530AX_B.11' ]]; then
printf ${RED}"No support, please use 30 for this\n"
elif [[ $1 == '7530AXB.30' ]]; then
source $NO_INMEMORY
elif [[ $1 == '7530AXB.35' ]]; then
source $NO_INMEMORY
elif [[ $1 == '7530AXB.multi' ]]; then
source $SSL30
elif [[ $1 == '7530AXB' ]] && [[ $2 == '-push' ]]; then
source $SSL30_PUSH

elif [[ $1 == '7682.11' ]]; then
printf ${RED}"No support, please use 30 for this\n"
elif [[ $1 == '7682.30' ]]; then
source $NO_INMEMORY
elif [[ $1 == '7682.35' ]]; then
source $NO_INMEMORY
elif [[ $1 == '7682.multi' ]]; then
source $SSL30
elif [[ $1 == '7682' ]] && [[ $2 == '-push' ]]; then
source $SSL30_PUSH

elif [[ $1 == '7690.11' ]]; then
printf ${RED}"No support, please use 30 for this\n"
elif [[ $1 == '7690.30' ]]; then
source $NO_INMEMORY
elif [[ $1 == '7690.35' ]]; then
source $NO_INMEMORY
elif [[ $1 == '7690.multi' ]]; then
source $SSL30
elif [[ $1 == '7690' ]] && [[ $2 == '-push' ]]; then
source $SSL30_PUSH

#arm boxen no oscam
elif [[ $1 == '1200.11' ]]; then
source $NO_OSCAM
elif [[ $1 == '1200.30' ]]; then
source $NO_OSCAM
elif [[ $1 == '1200.35' ]]; then
source $NO_OSCAM
elif [[ $1 == '1200.multi' ]]; then
printf ${RED}"No supported\n"
elif [[ $1 == '1200' ]] && [[ $2 == '-push' ]]; then
source $SSL11_PUSH_REPEATER

elif [[ $1 == '1260v2.11' ]]; then
source $NO_OSCAM
elif [[ $1 == '1260v2.30' ]]; then
source $NO_OSCAM
elif [[ $1 == '1260v2.35' ]]; then
source $NO_OSCAM
elif [[ $1 == '1260v2.multi' ]]; then
printf ${RED}"No supported\n"
elif [[ $1 == '1260v2' ]] && [[ $2 == '-push' ]]; then
source $SSL11_PUSH_POWERLINE

elif [[ $1 == '3000.11' ]]; then
source $NO_OSCAM
elif [[ $1 == '3000.30' ]]; then
source $NO_OSCAM
elif [[ $1 == '3000.35' ]]; then
source $NO_OSCAM
elif [[ $1 == '3000.multi' ]]; then
printf ${RED}"No supported\n"
elif [[ $1 == '3000' ]] && [[ $2 == '-push' ]]; then
source $SSL11_PUSH_REPEATER

elif [[ $1 == '6860.30' ]]; then
source $NO_OSCAM
elif [[ $1 == '6860.35' ]]; then
source $NO_OSCAM
elif [[ $1 == '6860.multi' ]]; then
source $SSL30
elif [[ $1 == '6860' ]] && [[ $2 == '-push' ]]; then
source $SSL30_PUSH

elif [[ $1 == '7581.10' ]]; then
source $NO_KERNEL_FILES
#printf ${RED}"No OpenSSL 1.0.2 Suportet by Freetz-NG\n"
elif [[ $1 == '7581.11' ]]; then
source $NO_KERNEL_FILES
elif [[ $1 == '7581.30' ]]; then
source $NO_KERNEL_FILES
elif [[ $1 == '7581.35' ]]; then
source $NO_KERNEL_FILES
elif [[ $1 == '7581.multi' ]]; then
printf ${RED}"No supported\n"
elif [[ $1 == '7581' ]] && [[ $2 == '-push' ]]; then
source $SSL10_PUSH

elif [[ $1 == '7582.10' ]]; then
source $NO_KERNEL_FILES
#printf ${RED}"No OpenSSL 1.0.2 Suportet by Freetz-NG\n"
elif [[ $1 == '7582.11' ]]; then
source $NO_KERNEL_FILES
elif [[ $1 == '7582.30' ]]; then
source $NO_KERNEL_FILES
elif [[ $1 == '7582.35' ]]; then
source $NO_KERNEL_FILES
elif [[ $1 == '7582.multi' ]]; then
printf ${RED}"No supported\n"
elif [[ $1 == '7582' ]] && [[ $2 == '-push' ]]; then
source $SSL10_PUSH

#arm boxen no inmemory no oscam
elif [[ $1 == '1200AX.11' ]]; then
source $NO_INMEMORY_NO_OSCAM
elif [[ $1 == '1200AX.30' ]]; then
source $NO_INMEMORY_NO_OSCAM
elif [[ $1 == '1200AX.35' ]]; then
source $NO_INMEMORY_NO_OSCAM
elif [[ $1 == '1200AX.multi' ]]; then
printf ${RED}"No supported\n"
elif [[ $1 == '1200AX' ]] && [[ $2 == '-push' ]]; then
source $SSL11_PUSH

elif [[ $1 == '1240AX.11' ]]; then
source $NO_INMEMORY_NO_OSCAM
elif [[ $1 == '1240AX.30' ]]; then
source $NO_INMEMORY_NO_OSCAM
elif [[ $1 == '1240AX.35' ]]; then
source $NO_INMEMORY_NO_OSCAM
elif [[ $1 == '1240AX.multi' ]]; then
printf ${RED}"No supported\n"
elif [[ $1 == '1240AX' ]] && [[ $2 == '-push' ]]; then
source $SSL11_PUSH_POWERLINE

elif [[ $1 == '1260E.11' ]]; then
source $NO_INMEMORY_NO_OSCAM
elif [[ $1 == '1260E.30' ]]; then
source $NO_INMEMORY_NO_OSCAM
elif [[ $1 == '1260E.35' ]]; then
source $NO_INMEMORY_NO_OSCAM
elif [[ $1 == '1260E.multi' ]]; then
printf ${RED}"No supported\n"
elif [[ $1 == '1260E' ]] && [[ $2 == '-push' ]]; then
source $SSL11_PUSH_POWERLINE

elif [[ $1 == '3000AX.11' ]]; then
source $NO_INMEMORY_NO_OSCAM
elif [[ $1 == '3000AX.30' ]]; then
source $NO_INMEMORY_NO_OSCAM
elif [[ $1 == '3000AX.35' ]]; then
source $NO_INMEMORY_NO_OSCAM
elif [[ $1 == '3000AX.multi' ]]; then
printf ${RED}"No supported\n"
elif [[ $1 == '3000AX' ]] && [[ $2 == '-push' ]]; then
source $SSL11_PUSH_REPEATER

elif [[ $1 == '6000.11' ]]; then
source $NO_INMEMORY_NO_OSCAM
elif [[ $1 == '6000.30' ]]; then
source $NO_INMEMORY_NO_OSCAM
elif [[ $1 == '6000.35' ]]; then
source $NO_INMEMORY_NO_OSCAM
elif [[ $1 == '6000.multi' ]]; then
printf ${RED}"No supported\n"
elif [[ $1 == '6000' ]] && [[ $2 == '-push' ]]; then
source $SSL11_PUSH_REPEATER

elif [[ $1 == 'Gateway.11' ]]; then
printf ${RED}"No support, please use 30 for this\n"
elif [[ $1 == 'Gateway.30' ]]; then
source $NO_INMEMORY_NO_OSCAM
#elif [[ $1 == 'Gateway.multi' ]]; then
#printf ${RED}"No supported\n"
elif [[ $1 == 'Gateway' ]] && [[ $2 == '-push' ]]; then
source $SSL30_PUSH_GATEWAY

#i686 boxen no inmemory
elif [[ $1 == '6430.10' ]]; then
source $NO_INMEMORY
#printf ${RED}"No OpenSSL 1.0.2 Suportet by Freetz-NG\n"
elif [[ $1 == '6430.11' ]]; then
source $NO_INMEMORY
elif [[ $1 == '6430.30' ]]; then
source $NO_INMEMORY
elif [[ $1 == '6430.35' ]]; then
source $NO_INMEMORY
elif [[ $1 == '6430.multi' ]]; then
source $SSL10
elif [[ $1 == '6430' ]] && [[ $2 == '-push' ]]; then
source $SSL10_PUSH

elif [[ $1 == '6490.10' ]]; then
source $NO_INMEMORY
#printf ${RED}"No OpenSSL 1.0.2 Suportet by Freetz-NG\n"
elif [[ $1 == '6490.11' ]]; then
source $NO_INMEMORY
elif [[ $1 == '6490.30' ]]; then
source $NO_INMEMORY
elif [[ $1 == '6490.35' ]]; then
source $NO_INMEMORY
elif [[ $1 == '6490.multi' ]]; then
source $SSL10
elif [[ $1 == '6490' ]] && [[ $2 == '-push' ]]; then
source $SSL10_PUSH

elif [[ $1 == '6590.10' ]]; then
source $NO_INMEMORY
#printf ${RED}"No OpenSSL 1.0.2 Suportet by Freetz-NG\n"
elif [[ $1 == '6590.11' ]]; then
source $NO_INMEMORY
elif [[ $1 == '6590.30' ]]; then
source $NO_INMEMORY
elif [[ $1 == '6590.35' ]]; then
source $NO_INMEMORY
elif [[ $1 == '6590.multi' ]]; then
source $SSL10
elif [[ $1 == '6590' ]] && [[ $2 == '-push' ]]; then
source $SSL10_PUSH

elif [[ $1 == '6591.11' ]]; then
printf ${RED}"No support, please use 30 for this\n"
elif [[ $1 == '6591.30' ]]; then
source $NO_INMEMORY
elif [[ $1 == '6591.35' ]]; then
source $NO_INMEMORY
elif [[ $1 == '6591.multi' ]]; then
source $SSL11
elif [[ $1 == '6591' ]] && [[ $2 == '-push' ]]; then
source $SSL30_PUSH

elif [[ $1 == '6660.11' ]]; then
printf ${RED}"No support, please use 30 for this\n"
elif [[ $1 == '6660.30' ]]; then
source $NO_INMEMORY
elif [[ $1 == '6660.35' ]]; then
source $NO_INMEMORY
elif [[ $1 == '6660.multi' ]]; then
source $SSL11
elif [[ $1 == '6660' ]] && [[ $2 == '-push' ]]; then
source $SSL30_PUSH

elif [[ $1 == '6670.30' ]]; then
source $NO_INMEMORY
elif [[ $1 == '6670.35' ]]; then
source $NO_INMEMORY
elif [[ $1 == '6670.multi' ]]; then
source $SSL30
elif [[ $1 == '6670' ]] && [[ $2 == '-push' ]]; then
source $SSL30_PUSH

elif [[ $1 == '6690.11' ]]; then
printf ${RED}"No support, please use 30 for this\n"
elif [[ $1 == '6690.30' ]]; then
source $NO_INMEMORY
elif [[ $1 == '6690.35' ]]; then
source $NO_INMEMORY
elif [[ $1 == '6690.multi' ]]; then
source $SSL11
elif [[ $1 == '6690' ]] && [[ $2 == '-push' ]]; then
source $SSL30_PUSH

#mips boxen
elif [[ $1 == '3272.10' ]]; then
source $I_MATIK
elif [[ $1 == '3272.11' ]]; then
source $I_MATIK
elif [[ $1 == '3272.30' ]]; then
source $I_MATIK
elif [[ $1 == '3272.35' ]]; then
source $I_MATIK
elif [[ $1 == '3272.multi' ]]; then
source $SSL10
elif [[ $1 == '3272' ]] && [[ $2 == '-push' ]]; then
source $SSL10_PUSH

elif [[ $1 == '3370.10' ]]; then
source $I_MATIK
elif [[ $1 == '3370.11' ]]; then
source $I_MATIK
elif [[ $1 == '3370.30' ]]; then
source $I_MATIK
elif [[ $1 == '3370.35' ]]; then
source $I_MATIK
elif [[ $1 == '3370.multi' ]]; then
source $SSL10
elif [[ $1 == '3370' ]] && [[ $2 == '-push' ]]; then
source $SSL10_PUSH

elif [[ $1 == '3390.10' ]]; then
source $I_MATIK
elif [[ $1 == '3390.11' ]]; then
source $I_MATIK
elif [[ $1 == '3390.30' ]]; then
source $I_MATIK
elif [[ $1 == '3390.35' ]]; then
source $I_MATIK
elif [[ $1 == '3390.multi' ]]; then
source $SSL10
elif [[ $1 == '3390' ]] && [[ $2 == '-push' ]]; then
source $SSL10_PUSH

elif [[ $1 == '3490.11' ]]; then
source $I_MATIK
elif [[ $1 == '3490.30' ]]; then
source $I_MATIK
elif [[ $1 == '3490.35' ]]; then
source $I_MATIK
elif [[ $1 == '3490.multi' ]]; then
source $SSL11
elif [[ $1 == '3490' ]] && [[ $2 == '-push' ]]; then
source $SSL11_PUSH

elif [[ $1 == '3490-Alien7490.11' ]]; then
source $I_MATIK
elif [[ $1 == '3490-Alien7490.30' ]]; then
source $I_MATIK
elif [[ $1 == '3490-Alien7490.35' ]]; then
source $I_MATIK
elif [[ $1 == '3490-Alien7490.multi' ]]; then
source $SSL11
elif [[ $1 == '3490-Alien7490' ]] && [[ $2 == '-push' ]]; then
source $SSL11_PUSH

elif [[ $1 == '5490.11' ]]; then
source $I_MATIK
elif [[ $1 == '5490.30' ]]; then
source $I_MATIK
elif [[ $1 == '5490.35' ]]; then
source $I_MATIK
elif [[ $1 == '5490.multi' ]]; then
source $SSL11
elif [[ $1 == '5490' ]] && [[ $2 == '-push' ]]; then
source $SSL11_PUSH

elif [[ $1 == '5491.11' ]]; then
source $I_MATIK
elif [[ $1 == '5491.30' ]]; then
source $I_MATIK
elif [[ $1 == '5491.35' ]]; then
source $I_MATIK
elif [[ $1 == '5491.multi' ]]; then
source $SSL11
elif [[ $1 == '5491' ]] && [[ $2 == '-push' ]]; then
source $SSL11_PUSH

elif [[ $1 == '6840.10' ]]; then
source $I_MATIK
elif [[ $1 == '6840.11' ]]; then
source $I_MATIK
elif [[ $1 == '6840.30' ]]; then
source $I_MATIK
elif [[ $1 == '6840.35' ]]; then
source $I_MATIK
elif [[ $1 == '6840.multi' ]]; then
source $SSL10
elif [[ $1 == '6840' ]] && [[ $2 == '-push' ]]; then
source $SSL10_PUSH

elif [[ $1 == '6890.11' ]]; then
source $I_MATIK
elif [[ $1 == '6890.30' ]]; then
source $I_MATIK
elif [[ $1 == '6890.35' ]]; then
source $I_MATIK
elif [[ $1 == '6890.multi' ]]; then
source $SSL11
elif [[ $1 == '6890' ]] && [[ $2 == '-push' ]]; then
source $SSL11_PUSH

elif [[ $1 == '7272.10' ]]; then
source $I_MATIK
elif [[ $1 == '7272.11' ]]; then
source $I_MATIK
elif [[ $1 == '7272.30' ]]; then
source $I_MATIK
elif [[ $1 == '7272.35' ]]; then
source $I_MATIK
elif [[ $1 == '7272.multi' ]]; then
source $SSL10
elif [[ $1 == '7272' ]] && [[ $2 == '-push' ]]; then
source $SSL10_PUSH

elif [[ $1 == '7362.10' ]]; then
source $I_MATIK
elif [[ $1 == '7362.11' ]]; then
source $I_MATIK
elif [[ $1 == '7362.30' ]]; then
source $I_MATIK
elif [[ $1 == '7362.35' ]]; then
source $I_MATIK
elif [[ $1 == '7362.multi' ]]; then
source $SSL10
elif [[ $1 == '7362' ]] && [[ $2 == '-push' ]]; then
source $SSL10_PUSH

elif [[ $1 == '7430.11' ]]; then
source $I_MATIK
elif [[ $1 == '7430.30' ]]; then
source $I_MATIK
elif [[ $1 == '7430.35' ]]; then
source $I_MATIK
elif [[ $1 == '7430.multi' ]]; then
source $SSL11
elif [[ $1 == '7430' ]] && [[ $2 == '-push' ]]; then
source $SSL11_PUSH

elif [[ $1 == '7490.11' ]]; then
source $I_MATIK
elif [[ $1 == '7490.30' ]]; then
source $I_MATIK
elif [[ $1 == '7490.35' ]]; then
source $I_MATIK
elif [[ $1 == '7490.multi' ]]; then
source $SSL11
elif [[ $1 == '7490' ]] && [[ $2 == '-push' ]]; then
source $SSL11_PUSH

elif [[ $1 == '7560.11' ]]; then
source $I_MATIK
elif [[ $1 == '7560.30' ]]; then
source $I_MATIK
elif [[ $1 == '7560.35' ]]; then
source $I_MATIK
elif [[ $1 == '7560.multi' ]]; then
source $SSL11
elif [[ $1 == '7560' ]] && [[ $2 == '-push' ]]; then
source $SSL11_PUSH

elif [[ $1 == '7580.11' ]]; then
source $I_MATIK
elif [[ $1 == '7580.30' ]]; then
source $I_MATIK
elif [[ $1 == '7580.35' ]]; then
source $I_MATIK
elif [[ $1 == '7580.multi' ]]; then
source $SSL11
elif [[ $1 == '7580' ]] && [[ $2 == '-push' ]]; then
source $SSL11_PUSH

elif [[ $1 == '7583.11' ]]; then
printf ${RED}"No support, please use 30 for this\n"
elif [[ $1 == '7583.30' ]]; then
source $I_MATIK
elif [[ $1 == '7583.35' ]]; then
source $I_MATIK
elif [[ $1 == '7583.multi' ]]; then
source $SSL11
elif [[ $1 == '7583' ]] && [[ $2 == '-push' ]]; then
source $SSL30_PUSH

elif [[ $1 == '7583vdsl.11' ]]; then
printf ${RED}"No support, please use 30 for this\n"
elif [[ $1 == '7583vdsl.30' ]]; then
source $I_MATIK
elif [[ $1 == '7583vdsl.35' ]]; then
source $I_MATIK
elif [[ $1 == '7583vdsl.multi' ]]; then
source $SSL11
elif [[ $1 == '7583vdsl' ]] && [[ $2 == '-push' ]]; then
source $SSL30_PUSH

elif [[ $1 == '7590.11' ]]; then
printf ${RED}"No support, please use 30 for this\n"
elif [[ $1 == '7590.30' ]]; then
source $I_MATIK
elif [[ $1 == '7590.35' ]]; then
source $I_MATIK
elif [[ $1 == '7590.multi' ]]; then
source $SSL11
elif [[ $1 == '7590' ]] && [[ $2 == '-push' ]]; then
source $SSL30_PUSH

elif [[ $1 == '7590AX.11' ]]; then
printf ${RED}"No support, please use 30 for this\n"
elif [[ $1 == '7590AX.30' ]]; then
source $I_MATIK
elif [[ $1 == '7590AX.35' ]]; then
source $I_MATIK
elif [[ $1 == '7590AX.multi' ]]; then
source $SSL11
elif [[ $1 == '7590AX' ]] && [[ $2 == '-push' ]]; then
source $SSL30_PUSH

#mips boxen no oscam
elif [[ $1 == '3370-Alien3490.11' ]]; then
source $NO_OSCAM
elif [[ $1 == '3370-Alien3490.30' ]]; then
source $NO_OSCAM
elif [[ $1 == '3370-Alien3490.35' ]]; then
source $NO_OSCAM
elif [[ $1 == '3370-Alien3490.multi' ]]; then
printf ${RED}"No supported\n"
elif [[ $1 == '3370' ]] && [[ $2 == '-push' ]]; then
source $SSL11_PUSH

elif [[ $1 == '3390-Alien3490.11' ]]; then
source $NO_OSCAM
elif [[ $1 == '3390-Alien3490.30' ]]; then
source $NO_OSCAM
elif [[ $1 == '3390-Alien3490.35' ]]; then
source $NO_OSCAM
elif [[ $1 == '3390-Alien3490.multi' ]]; then
printf ${RED}"No supported\n"
elif [[ $1 == '3390' ]] && [[ $2 == '-push' ]]; then
source $SSL11_PUSH

elif [[ $1 == '6820v1.11' ]]; then
source $NO_OSCAM
elif [[ $1 == '6820v1.30' ]]; then
source $NO_OSCAM
elif [[ $1 == '6820v1.35' ]]; then
source $NO_OSCAM
elif [[ $1 == '6820v1.multi' ]]; then
printf ${RED}"No supported\n"
elif [[ $1 == '6820v1' ]] && [[ $2 == '-push' ]]; then
source $SSL11_PUSH

elif [[ $1 == '6820v2.11' ]]; then
source $NO_OSCAM
elif [[ $1 == '6820v2.30' ]]; then
source $NO_OSCAM
elif [[ $1 == '6820v2.35' ]]; then
source $NO_OSCAM
elif [[ $1 == '6820v2.multi' ]]; then
printf ${RED}"No supported\n"
elif [[ $1 == '6820v2' ]] && [[ $2 == '-push' ]]; then
source $SSL11_PUSH

elif [[ $1 == '6820v3.11' ]]; then
source $NO_OSCAM
elif [[ $1 == '6820v3.30' ]]; then
source $NO_OSCAM
elif [[ $1 == '6820v3.35' ]]; then
source $NO_OSCAM
elif [[ $1 == '6820v3.multi' ]]; then
printf ${RED}"No supported\n"
elif [[ $1 == '6820v3' ]] && [[ $2 == '-push' ]]; then
source $SSL11_PUSH

elif [[ $1 == '6820v4.11' ]]; then
source $NO_OSCAM
elif [[ $1 == '6820v4.30' ]]; then
source $NO_OSCAM
elif [[ $1 == '6820v4.35' ]]; then
source $NO_OSCAM
elif [[ $1 == '6820v4.multi' ]]; then
printf ${RED}"No supported\n"
elif [[ $1 == '6820v4' ]] && [[ $2 == '-push' ]]; then
source $SSL11_PUSH

elif [[ $1 == '7412.10' ]]; then
source $NO_OSCAM
elif [[ $1 == '7412.11' ]]; then
source $NO_OSCAM
elif [[ $1 == '7412.30' ]]; then
source $NO_OSCAM
elif [[ $1 == '7412.35' ]]; then
source $NO_OSCAM
elif [[ $1 == '7412.multi' ]]; then
printf ${RED}"No supported\n"
elif [[ $1 == '7412' ]] && [[ $2 == '-push' ]]; then
source $SSL10_PUSH

#elif [[ $1 == '7412-Alien7430.10' ]]; then
#source $NO_OSCAM
elif [[ $1 == '7412-Alien7430.11' ]]; then
source $NO_OSCAM
elif [[ $1 == '7412-Alien7430.30' ]]; then
source $NO_OSCAM
elif [[ $1 == '7412-Alien7430.35' ]]; then
source $NO_OSCAM
elif [[ $1 == '7412-Alien7430.multi' ]]; then
printf ${RED}"No supported\n"
elif [[ $1 == '7412-Alien7430' ]] && [[ $2 == '-push' ]]; then
source $SSL11_PUSH

#mips boxen external no inmemory
elif [[ $1 == '4020.10' ]]; then
source $EXTERNAL_NO_INMEMORY
elif [[ $1 == '4020.11' ]]; then
source $EXTERNAL_NO_INMEMORY
elif [[ $1 == '4020.30' ]]; then
printf ${RED}"No supported\n"
elif [[ $1 == '4020.35' ]]; then
printf ${RED}"No supported\n"
elif [[ $1 == '4020.multi' ]]; then
source $SSL10
elif [[ $1 == '4020' ]] && [[ $2 == '-push' ]]; then
source $SSL10_PUSH

elif [[ $1 == '7320.10' ]]; then
source $EXTERNAL_NO_INMEMORY

elif [[ $1 == '7320-Alien7330.10' ]]; then
source $EXTERNAL_NO_INMEMORY_NO_OSCAM
elif [[ $1 == '7320-Alien7330.11' ]]; then
source $EXTERNAL_NO_INMEMORY_NO_OSCAM
elif [[ $1 == '7320-Alien7330.30' ]]; then
source $EXTERNAL_NO_INMEMORY_NO_OSCAM
elif [[ $1 == '7320-Alien7330.35' ]]; then
source $EXTERNAL_NO_INMEMORY_NO_OSCAM
elif [[ $1 == '7320-Alien7330.multi' ]]; then
source $SSL10
elif [[ $1 == '7320-Alien7330' ]] && [[ $2 == '-push' ]]; then
source $SSL10_PUSH

elif [[ $1 == '7330.10' ]]; then
source $EXTERNAL_NO_INMEMORY
elif [[ $1 == '7330.11' ]]; then
source $EXTERNAL_NO_INMEMORY
elif [[ $1 == '7330.30' ]]; then
source $EXTERNAL_NO_INMEMORY
elif [[ $1 == '7330.35' ]]; then
source $EXTERNAL_NO_INMEMORY
elif [[ $1 == '7330.multi' ]]; then
source $SSL10
elif [[ $1 == '7330' ]] && [[ $2 == '-push' ]]; then
source $SSL10_PUSH

elif [[ $1 == '7330SL.10' ]]; then
source $EXTERNAL_NO_INMEMORY
elif [[ $1 == '7330SL.11' ]]; then
source $EXTERNAL_NO_INMEMORY
elif [[ $1 == '7330SL.30' ]]; then
source $EXTERNAL_NO_INMEMORY
elif [[ $1 == '7330SL.35' ]]; then
source $EXTERNAL_NO_INMEMORY
elif [[ $1 == '7330SL.multi' ]]; then
source $SSL10
elif [[ $1 == '7330SL' ]] && [[ $2 == '-push' ]]; then
source $SSL10_PUSH

elif [[ $1 == '7340.10' ]]; then
source $EXTERNAL_NO_INMEMORY

elif [[ $1 == '7360v1.10' ]]; then
source $EXTERNAL_NO_INMEMORY

elif [[ $1 == '7390.10' ]]; then
source $EXTERNAL_NO_INMEMORY
elif [[ $1 == '7390.11' ]]; then
source $EXTERNAL_NO_INMEMORY
elif [[ $1 == '7390.30' ]]; then
source $EXTERNAL_NO_INMEMORY
elif [[ $1 == '7390.35' ]]; then
source $EXTERNAL_NO_INMEMORY
elif [[ $1 == '7390.multi' ]]; then
source $SSL10
elif [[ $1 == '7390' ]] && [[ $2 == '-push' ]]; then
source $SSL10_PUSH

#mips boxen no inmemory
elif [[ $1 == '7360v2.10' ]]; then
source $NO_INMEMORY
elif [[ $1 == '7360v2.11' ]]; then
source $NO_INMEMORY
elif [[ $1 == '7360v2.30' ]]; then
source $NO_INMEMORY
elif [[ $1 == '7360v2.35' ]]; then
source $NO_INMEMORY
elif [[ $1 == '7360v2.multi' ]]; then
source $SSL10
elif [[ $1 == '7360v2' ]] && [[ $2 == '-push' ]]; then
source $SSL10_PUSH

elif [[ $1 == '7369.10' ]]; then
source $NO_INMEMORY

#mips boxen no inmemory no oscam
elif [[ $1 == 'DVB-C.10' ]]; then
source $NO_INMEMORY_NO_OSCAM
elif [[ $1 == 'DVB-C.11' ]]; then
source $NO_INMEMORY_NO_OSCAM
elif [[ $1 == 'DVB-C.30' ]]; then
source $NO_INMEMORY_NO_OSCAM
elif [[ $1 == 'DVB-C.35' ]]; then
source $NO_INMEMORY_NO_OSCAM
elif [[ $1 == 'DVB-c.multi' ]]; then
printf ${RED}"No supported\n"
elif [[ $1 == 'DVB-C' ]] && [[ $2 == '-push' ]]; then
source $SSL10_PUSH_REPEATER

elif [[ $1 == 'DVB-c-Alien1750E.11' ]]; then
source $NO_INMEMORY_NO_OSCAM
#elif [[ $1 == 'DVB-c-Alien1750E.30' ]]; then
#source $NO_INMEMORY_NO_OSCAM
#elif [[ $1 == 'DVB-c-Alien1750E.multi' ]]; then
#printf ${RED}"No supported\n"
elif [[ $1 == 'DVB-c-Alien1750E' ]] && [[ $2 == '-push' ]]; then
source $SSL11_PUSH_REPEATER

elif [[ $1 == '300E.10' ]]; then
source $NO_INMEMORY_NO_OSCAM
elif [[ $1 == '300E.11' ]]; then
source $NO_INMEMORY_NO_OSCAM
elif [[ $1 == '300E.30' ]]; then
source $NO_INMEMORY_NO_OSCAM
elif [[ $1 == '300E.35' ]]; then
source $NO_INMEMORY_NO_OSCAM
elif [[ $1 == '300E.multi' ]]; then
printf ${RED}"No supported\n"
elif [[ $1 == '300E' ]] && [[ $2 == '-push' ]]; then
source $SSL10_PUSH_REPEATER

elif [[ $1 == '450E.10' ]]; then
source $NO_INMEMORY_NO_OSCAM
elif [[ $1 == '450E.11' ]]; then
source $NO_INMEMORY_NO_OSCAM
elif [[ $1 == '450E.30' ]]; then
source $NO_INMEMORY_NO_OSCAM
elif [[ $1 == '450E.35' ]]; then
source $NO_INMEMORY_NO_OSCAM
elif [[ $1 == '450E.multi' ]]; then
printf ${RED}"No supported\n"
elif [[ $1 == '450E' ]] && [[ $2 == '-push' ]]; then
source $SSL10_PUSH_REPEATER

elif [[ $1 == '540E.10' ]]; then
source $NO_INMEMORY_NO_OSCAM
elif [[ $1 == '540E.11' ]]; then
source $NO_INMEMORY_NO_OSCAM
elif [[ $1 == '540E.30' ]]; then
source $NO_INMEMORY_NO_OSCAM
elif [[ $1 == '540E.35' ]]; then
source $NO_INMEMORY_NO_OSCAM
elif [[ $1 == '540E.multi' ]]; then
printf ${RED}"No supported\n"
elif [[ $1 == '540E' ]] && [[ $2 == '-push' ]]; then
source $SSL10_PUSH_POWERLINE

elif [[ $1 == '546E.10' ]]; then
source $NO_INMEMORY_NO_OSCAM
elif [[ $1 == '546E.11' ]]; then
source $NO_INMEMORY_NO_OSCAM
elif [[ $1 == '546E.30' ]]; then
source $NO_INMEMORY_NO_OSCAM
elif [[ $1 == '546E.35' ]]; then
source $NO_INMEMORY_NO_OSCAM
elif [[ $1 == '546E.multi' ]]; then
printf ${RED}"No supported\n"
elif [[ $1 == '546E' ]] && [[ $2 == '-push' ]]; then
source $SSL10_PUSH_POWERLINE

elif [[ $1 == '1240E.10' ]]; then
source $NO_INMEMORY_NO_OSCAM
elif [[ $1 == '1240E.11' ]]; then
source $NO_INMEMORY_NO_OSCAM
elif [[ $1 == '1240E.30' ]]; then
source $NO_INMEMORY_NO_OSCAM
elif [[ $1 == '1240E.35' ]]; then
source $NO_INMEMORY_NO_OSCAM
elif [[ $1 == '1240E.multi' ]]; then
printf ${RED}"No supported\n"
elif [[ $1 == '1240E' ]] && [[ $2 == '-push' ]]; then
source $SSL10_PUSH_POWERLINE

elif [[ $1 == '1750E.11' ]]; then
source $NO_INMEMORY_NO_OSCAM
#elif [[ $1 == '1750E.30' ]]; then
#source $NO_INMEMORY_NO_OSCAM
#elif [[ $1 == '1750E.multi' ]]; then
#printf ${RED}"No supported\n"
elif [[ $1 == '1750E' ]] && [[ $2 == '-push' ]]; then
source $SSL11_PUSH_REPEATER

elif [[ $1 == '2400.11' ]]; then
source $NO_INMEMORY_NO_OSCAM
elif [[ $1 == '2400.30' ]]; then
source $NO_INMEMORY_NO_OSCAM
elif [[ $1 == '2400.35' ]]; then
source $NO_INMEMORY_NO_OSCAM
elif [[ $1 == '2400.multi' ]]; then
printf ${RED}"No supported\n"
elif [[ $1 == '2400' ]] && [[ $2 == '-push' ]]; then
source $SSL11_PUSH_REPEATER

elif [[ $1 == '5530.11' ]]; then
printf ${RED}"No support, please use 30 for this\n"
elif [[ $1 == '5530.30' ]]; then
source $NO_INMEMORY_NO_OSCAM
elif [[ $1 == '5530.35' ]]; then
source $NO_INMEMORY_NO_OSCAM
elif [[ $1 == '5530.multi' ]]; then
printf ${RED}"No supported\n"
elif [[ $1 == '5530' ]] && [[ $2 == '-push' ]]; then
source $SSL30_PUSH

elif [[ $1 == '6810.10' ]]; then
source $NO_INMEMORY_NO_OSCAM

elif [[ $1 == '7312.10' ]]; then
source $NO_INMEMORY_NO_OSCAM
elif [[ $1 == '7312.11' ]]; then
source $NO_INMEMORY_NO_OSCAM
elif [[ $1 == '7312.30' ]]; then
source $NO_INMEMORY
elif [[ $1 == '7312.35' ]]; then
source $NO_INMEMORY
elif [[ $1 == '7312.multi' ]]; then
printf ${RED}"No supported\n"
elif [[ $1 == '7312' ]] && [[ $2 == '-push' ]]; then
source $SSL10_PUSH

#mipsel boxen no inmemory
elif [[ $1 == '7240.10' ]]; then
source $EXTERNAL_NO_INMEMORY

elif [[ $1 == '7270v2.10' ]]; then
source $EXTERNAL_NO_INMEMORY

elif [[ $1 == '7270v3.10' ]]; then
source $EXTERNAL_NO_INMEMORY

elif [[ $1 == '-backup' ]]; then
source $I_MATIK_PATH/support/i-matik/scripts/./backup

elif [[ $1 == '-deloscam' ]]; then
rm $FREETZ_IMAGE_PATH/$END_IMAGE_PATH/*/oscam-svn*.upx

elif [[ $1 == 'test.11' ]]; then
source $NO_INMEMORY

elif [[ $1 == 'toolchain.11' ]]; then
source $I_MATIK_TOOLCHAN

elif [[ $1 == 'create' ]]; then
source $CREATE_BOXES

elif [[ $1 == 'oscam_tcupdate' ]]; then
source $OSCAM_TCUPDATE

else

# Function to generate list of supported devices
generate_device_list() {
    local config_path=$1
    local ssl_version=$2
    local device_list_var="SUPPORTED_BOX_TYPE_LIST_SSL_$ssl_version"
    local ssl_number_list_var="SUPPORTED_SSL_NUMBER_LIST_SSL_$ssl_version"

    if [[ -d "$config_path" ]]; then
        eval "$device_list_var=\"\$(find \"$config_path\" -name \"config_fritz*ssl_$ssl_version*\" -type f -exec basename {} \; | awk -F'_' '{print \$2}')\""
        eval "$device_list_var=\"\${$device_list_var//\"fritz\"/\"\"}\""
        eval "$device_list_var=\"\$(echo \$$device_list_var | tr ' ' '\n' | sort | uniq | tr '\n' ' ')\""

        eval "$ssl_number_list_var=\"\$(find \"$config_path\" -name \"ssl_$ssl_version*\" -type d -exec basename {} \; | awk -F'_' '{print \$2}')\""
        eval "$ssl_number_list_var=\"\$(echo \$$ssl_number_list_var | tr ' ' '\n' | sort | uniq | tr '\n' ' ')\""
    else
        echo "Warning: Directory $config_path does not exist."
    fi
}

# Generate lists for different SSL versions
generate_device_list "$CONFIG_FRITZBOX_PATH_SSL_10" "1_0"
generate_device_list "$CONFIG_FRITZBOX_PATH_SSL_11" "1_1"
generate_device_list "$CONFIG_FRITZBOX_PATH_SSL_30" "3_0"
generate_device_list "$CONFIG_FRITZBOX_PATH_SSL_35" "3_5"
generate_device_list "$CONFIG_FRITZBOX_PATH_SSL_multi" "multi"

# Generate list of supported devices for all versions
SUPPORTED_BOX_TYPE_LIST="$(find "$I_MATIK_PATH/support/" -name "config_fritz*_*" -type f -exec basename {} \; | awk -F'_' '{print $2}')"
SUPPORTED_BOX_TYPE_LIST="${SUPPORTED_BOX_TYPE_LIST//"fritz"/""}"
SUPPORTED_BOX_TYPE_LIST="$(echo $SUPPORTED_BOX_TYPE_LIST | tr ' ' '\n' | sort | uniq | tr '\n' ' ')"

# Generate list of supported ssl versions
SUPPORTED_SSL_NUMBER_LIST=$(find "$I_MATIK_PATH/support/" -name "ssl_*" -type d -exec basename {} \; | awk -F'_' '{print $2}' | sort -u | tr '\n' ' ')
	printf "i-matik comes with ABSOLUTELY NO WARRANTY.  This is free software, and you\n"
	printf "are welcome to redistribute it under certain conditions. See the GNU\n"
	printf "General Public Licence for details.\n\n"
	printf "i-matik is a collection of helper scripts capable of efficient building\n"
	printf "freetz-ng images for Fritz!Box or Fritz!Repeater or Fritz!Powerline.\n\n"
	printf "Usage: i-matik [OPTION]... [BOX_TYPE.SSL_NUMBER]...\n"
	printf "  or   i-matik [BOX_TYPE.SSL_NUMBER]... [OPTION]... \n\n"
	printf "Options\n"
	printf "  BOX_TYPE\t\t\tany currently supported devices\n"
	printf "  SSL_NUMBER\t\t\t10 - OpenSSL 1.0.x\n"
	printf "  \t\t\t\t11 - OpenSSL 1.1.x\n"
	printf "  \t\t\t\t30 - OpenSSL 3.0.x\n"
	printf "  \t\t\t\t35 - OpenSSL 3.5.x (only intern)\n"
	printf "  \t\t\t\tmulti - OpenSSL multiple Versions (only intern)\n"
	printf "  -c,--config\t\t\tshow not freetz-ng configuration dialog\n"
	printf "  -s,--skip-image2memory\tdo not create inmemory image\n"
	printf "  -int,--international\t\tInternational Version\n"
	printf "  -yo,--yes-oscam\t\tThe image is with oscam add-on and an oscam is created\n"
	printf "  -yoe,--yes-oscam\t\tThe image is with oscam_emu add-on and an oscam is created\n"
	printf "  -ysmod,--yes-oscam-smod\tThe image is with oscam_smod add-on and an oscam is created (still disabled)\n"
	printf "  -to,--tool-oscam\t\toscam ToolChain\n"
	printf "  -do,--del-oscam\t\tdelete the old oscam and build a new one\n"
	printf "  -deloscam\t\t\tdelete all oscams\n"
	printf "  -nc,--no-clientbox\t\tNo client box image is created\n"
	printf "  -nm,--no-masterbox\t\tNo master box image is created\n"
	printf "  -kp,--kernel-precompiled\tMake kernel-precompiled\n"
	printf "  -kc,--kernel-clean\t\tMake kernel-clean\n"
	printf "  -km,--kernel-menuconfig\tMake kernel-menuconfig\n"
	printf "  -ta,--toolchain-activate\tActivate toolchain\n"
	printf "  -td,--toolchain-disable\tDisable toolchain\n"
	printf "  -tc,--toolchain-clean\t\tClean toolchain\n"
	printf "  -tm,--toolchain-make\t\tMake toolchain\n"
	printf "  -cm,--callmonitor\t\tCallmonitor\n"
	printf "  -rr,--rrdstats\t\tRRDstats for RRDtool 1.2.30\n"
	printf "  -rr18,--rrdstats18\t\tRRDstats for RRDtool 1.8.0\n"
	printf "  -vs,--vnstat\t\t\tVNSTAT\n"
	printf "  -wg,--wireguard\t\tWIREGUARD\n"
	printf "  -ov|--openvpn\t\t\tOpenvpn\n"
	printf "  -tel|--telnet\t\t\tTelnet\n"
	printf "  -idm|--inadyn-mt\t\tInadyn-mt\n"
	printf "  -l4l|--lcd4linux\t\tLCD 4 LINUX\n"
	printf "  -vfp|--vsftpd\t\t\tsecure FTP server\n"
	printf "  -push\t\t\t\tpush image to Fritz!Box or Fritz!Repeater or Fritz!Powerline\n"
	printf "  -backup\t\t\tmake a backup of your freetz-signature and freetz-dl\n"
	printf "  -us,--user-skins\t\tuser skins\n"
	printf "  -us1,--user-skins1\t\tuser skins1\n"
	printf "  -ua,--user-application\tuser application \n"
	printf "  -sa,--samba\t\t\tsamba \n\n"
	printf ${GREEN}"List of currently OpenSSL 1.0.x supported devices (BOX_TYPE)${NC}: ${SUPPORTED_BOX_TYPE_LIST_SSL_1_0}\n"
	printf ${BLUE}"To build an OpenSSL 1.0.x image for Fritz!Box 3272 use this command:${NC}\n"
	printf "$0 3272.10\n\n"
	printf ${GREEN}"List of currently OpenSSL 1.1.x supported devices (BOX_TYPE)${NC}: ${SUPPORTED_BOX_TYPE_LIST_SSL_1_1}\n"
	printf ${BLUE}"To build an OpenSSL 3.0.x image for Fritz!Box 7490 use this command:${NC}\n"
	printf "$0 7490.11\n\n"
	printf ${GREEN}"List of currently OpenSSL 3.0.x supported devices (BOX_TYPE)${NC}: ${SUPPORTED_BOX_TYPE_LIST_SSL_3_0}\n"
	printf ${BLUE}"To build an OpenSSL 3.0.x image for Fritz!Box 7490 use this command:${NC}\n"
	printf "$0 7490.30\n\n"
	printf ${GREEN}"List of currently OpenSSL 3.5.x supported devices (BOX_TYPE)${NC}: ${SUPPORTED_BOX_TYPE_LIST_SSL_3_5}\n"
	printf ${BLUE}"To build an OpenSSL 3.5.x image for Fritz!Box 7490 use this command:${NC}\n"
	printf "$0 7490.35\n\n"
	printf ${GREEN}"List of currently OpenSSL MULTI supported devices (BOX_TYPE)${NC}: ${SUPPORTED_BOX_TYPE_LIST_SSL_MULTI}\n"
	printf ${BLUE}"To build an OpenSSL MULTI image for Fritz!Box 7490 use this command:${NC}\n"
	printf "$0 7490.multi\n\n"
	printf ${GREEN}"List of currently push supported devices (BOX_TYPE)${NC}: ${SUPPORTED_BOX_TYPE_LIST}\n"
	printf ${BLUE}"Push the create image to the Fritz!Box 7490, use this command:${NC}\n"
	printf "$0 7490 -push\n"
	printf "${GREEN}push to box${NC}\n"
	printf "${GREEN}Create your own toolchains${NC}\n"
	printf "$0 toolchain.11\n"
	printf "${GREEN}Update s3${NC}\n"
	printf "$0 oscam_tcupdate \t\t\t./s3 tcupdate --reset\n"
	printf "${GREEN}Create your own Images${NC}\n"
	printf "$0 create -my\t\t\t\tCreate an image for My Boxes\n"
	printf "$0 create -my-multi\t\t\tCreate an image for My Boxes in Multie\n"
	printf "$0 create -all\t\t\t\tCreate all images\n"
	printf "$0 create -without-multi\t\t\tCreate all images without Multi\n"
	printf "$0 create -only-multi\t\t\tCreate all images only him Multi\n"
	printf "$0 create -all-toolchain\t\t\tCreate all Toolchains for oscam\n"
	printf "$0 create -without-multi-toolchain\tCreate all Toolchains without Multi for oscam\n"
	printf "$0 create -only-multi-toolchain\t\tCreate all Toolchains only him Multi for oscam"
printf "\n\x1b[0;33m\033[1m\033[5m\t    ___      __  __    _  _____ ___ _  __\n"
printf "\t   |_ _|    |  \/  |  / \|_   _|_ _| |/ /\n"
printf "\t    | |_____| |\/| | / _ \ | |  | || ' /\n" 
printf "\t    | |_____| |  | |/ ___ \| |  | || . \ \n" 
printf "\t   |___|    |_|  |_/_/   \_\_| |___|_|\_\ \033[0m\n"
printf "\t        for freetz-ng and s3_releases\n"
printf "\t   https://github.com/MasterRoCcO/i-matik\n"
printf "\t        Version $VERSIONS_NR\n"
printf "\t  https://www.spendenseite.de/i-matik/-67603\n"
source $ONLY_FRIENDS 2>/dev/null
	exit 0
fi
