#!/bin/bash
NC='\033[0m' 		# RESET color
RED='\033[0;31m'	# RED color
GREEN='\033[0;32m'	# GREEN color
BLUE='\033[0;34m'	# BLUE color
YELLOW='\033[0;33m'	# YELLOW color

# Evaluate commandline parameter
while [ $# -ne 0 ];do
    case "$1" in
        -c|--config)	PARAM_CONFIG=1
            ;;
        -s|--skip-image2memory)	PARAM_SKIP_I2M=1
            ;;
        -nc|--no-clientbox)	        PARAM_SKIP_CLIENT=1
            ;;
        -nm|--no-masterbox)	        PARAM_SKIP_MASTER=1
            ;;
        -cm|--callmonitor)	        PARAM_CM=1
            ;;
        -rr|--rrdstats)	        PARAM_RR=1
            ;;
        -us|--user-skins)		PARAM_SKINS=1
            ;;
        -ua|--user-application)	PARAM_USER_SCRIPTS=1
            ;;
        -*|--*)			PARAM_BAD=1
            ;;
        *)				BOX_SSL+=( $1 )
            ;;
    esac
    shift
done
COUNT="${#BOX_SSL[@]}"	# parameter count

# Generate list of supported devices
SUPPORTED_BOX_TYPE_LIST="$(find "$I_MATIK_PATH/support/" -name "config_fritz*_*" -type f -exec basename {} \; | awk -F'_' '{print $2}')"
SUPPORTED_BOX_TYPE_LIST="${SUPPORTED_BOX_TYPE_LIST//"fritz"/""}"
SUPPORTED_BOX_TYPE_LIST="$(echo $SUPPORTED_BOX_TYPE_LIST | tr ' ' '\n' | sort | uniq | tr '\n' ' ')"

# Generate list of supported ssl versions
SUPPORTED_SSL_NUMBER_LIST="$(find "$I_MATIK_PATH/support/" -name "openssl_*" -type d -exec basename {} \;  | awk -F'_' '{print $2}')"
SUPPORTED_SSL_NUMBER_LIST="$(echo $SUPPORTED_SSL_NUMBER_LIST | tr ' ' '\n' | sort | uniq | tr '\n' ' ')"

begin=$(date +"%s")	# script start time
# Loop through string array of boxes
for bs in "${BOX_SSL[@]}"; do

	# Get box and ssl variables
	BOX_NAME="$(echo $bs | awk -F'.' '{print $1}')"	# extract box type
	BOX_SSL="$(echo $bs | awk -F'.' '{print $2}')"	# extract ssl number
	[[ $BOX_SSL == ?(-)+([0-9]) ]] && SSL_VERSION="${BOX_SSL:0:1}.${BOX_SSL:1:1}.x" || SSL_VERSION="${BOX_SSL,,}" # translate ssl number to version string
	
	# Check box is supported
	MATCH_BOX="$(echo $SUPPORTED_BOX_TYPE_LIST | grep -wo $BOX_NAME)"
	MATCH_SSL="$(echo $SUPPORTED_SSL_NUMBER_LIST | grep -wo $BOX_SSL)"
	if [ -z "$MATCH_BOX" -o -z "$MATCH_SSL" ]; then
		[ -z "$MATCH_BOX" ] && COLOR_BOX="${RED}" || COLOR_BOX="${YELLOW}"
		[ -z "$MATCH_SSL" ] && COLOR_SSL="${RED}" || COLOR_SSL="${YELLOW}"
		printf "\n${COLOR_BOX}${BOX_NAME}${NC} ${COLOR_SSL}SSL ${SSL_VERSION}${NC} ${YELLOW}currently not supported!${NC}\n"
		continue
	fi
	
	BOX_HOME="${BOX_NAME:0:2}xx"	# set box home folder
	FREETZ_SSL_PATH="FREETZ_PATH_SSL_${BOX_SSL^^}"	# dynamic variable
	FREETZ_SSL_CONFIG_PATH="I_MATIK_CONFIG_FRITZBOX_PATH_openssl_${BOX_SSL,,}"	# dynamic variable

	FREETZ_SSL_HOME_PATH="${!FREETZ_SSL_PATH}/$BOX_HOME"	# evaluate dynamic variable
	FREETZ_SSL_CONFIG_PATH="${!FREETZ_SSL_CONFIG_PATH}"		# evaluate dynamic variable

	let COUNTER++	# counter variable + 1
	beginbs=$(date +"%s")	# build start time
	printf "\n${COUNTER}/${COUNT}: Building ${GREEN}${BOX_NAME} SSL ${SSL_VERSION}${NC} freetz-ng image, please wait ... ${YELLOW}-> start time $(date +"%Y-%m-%d %H:%M:%S")${NC}\n\n"
	
	if [ ! -e "$FREETZ_SSL_HOME_PATH" ]; then
		umask 0022
		git clone https://github.com/Freetz-NG/freetz-ng "$FREETZ_SSL_HOME_PATH"
		rm -rf "$FREETZ_SSL_HOME_PATH/addon"
		cp -ar /$MY_FILES_HOME_PATH/make/* "$FREETZ_SSL_HOME_PATH/make/"
		ln -s /$MY_FILES_HOME_PATH/addon $FREETZ_SSL_HOME_PATH/addon
	elif [ ! -d "$FREETZ_SSL_HOME_PATH" ]; then
		printf "${YELLOW}'$FREETZ_SSL_HOME_PATH' already exists but is not a directory${NC}" 1>&2
		exit 1
	fi

	# Create directory for saving built images
	mkdir -p $FREETZ_IMAGE_PATH/$END_IMAGE_PATH/$BOX_NAME 2>/dev/null	# create images folder
	[ -z $PARAM_SKIP_I2M ] && mkdir -p $FREETZ_IMAGE_PATH/$END_IMAGE_INMEMORY_PATH/$BOX_NAME 2>/dev/null	# create inmemory folder, when it is not disabled
	
	# Remove older image files
	DELETE_IMAGE_NAME="*$(echo ${!FREETZ_SSL_PATH} | awk -F'/' '{print $NF}').image"	# construct image filname filter
	find "$FREETZ_IMAGE_PATH/$END_IMAGE_PATH/$BOX_NAME/" -name "${DELETE_IMAGE_NAME}" -type f -mmin +$delete_images -delete 2>/dev/null
	find "$FREETZ_IMAGE_PATH/$END_IMAGE_INMEMORY_PATH/$BOX_NAME/" -name "${DELETE_IMAGE_NAME}.inmemory" -type f -mmin +$delete_images -delete 2>/dev/null
	
	# skins to static.pkg
	if [ -z $PARAM_SKINS ]; then
	       sleep 0
	else
	       source $I_MATIK_PATH/support/freetz/scripts/packages/skins_on
	fi
	
	# update git working copy
	cd "$FREETZ_SSL_HOME_PATH" && git pull
	umask 0022
	cp -ar /$MY_FILES_HOME_PATH/make/* "$FREETZ_SSL_HOME_PATH/make/"
	[ -f .config ] && mv .config .config_backup	# rename original config to backup config
	FREETZ_NAME="$(tools/freetz_revision 2>&1 | awk '{print $1}' | xargs)"	# freetz-ng name
	FREETZ_VERSION="$(tools/freetz_revision 2>&1 | awk '{print $2}' | xargs)"	# freetz-ng version string

	if [ -z $PARAM_SKIP_CLIENT ]; then
		sleep 0
	else
		mv -f $I_MATIK_CONFIG_FRITZBOX_PATH_openssl_10/config_fritz${BOX_NAME}_${FREETZ_SSL_VERSION_10}_clientbox $I_MATIK_CONFIG_FRITZBOX_PATH_openssl_10/config_fritz${BOX_NAME}_${FREETZ_SSL_VERSION_10}_clientbox_no 2>/dev/null	
		mv -f $I_MATIK_CONFIG_FRITZBOX_PATH_openssl_11/config_fritz${BOX_NAME}_${FREETZ_SSL_VERSION_11}_clientbox $I_MATIK_CONFIG_FRITZBOX_PATH_openssl_11/config_fritz${BOX_NAME}_${FREETZ_SSL_VERSION_11}_clientbox_no 2>/dev/null
		mv -f $I_MATIK_CONFIG_FRITZBOX_PATH_openssl_30/config_fritz${BOX_NAME}_${FREETZ_SSL_VERSION_30}_clientbox $I_MATIK_CONFIG_FRITZBOX_PATH_openssl_30/config_fritz${BOX_NAME}_${FREETZ_SSL_VERSION_30}_clientbox_no 2>/dev/null
	fi
	
	if [ -z $PARAM_SKIP_MASTER ]; then
		sleep 0
	else
		mv -f $I_MATIK_CONFIG_FRITZBOX_PATH_openssl_10/config_fritz${BOX_NAME}_${FREETZ_SSL_VERSION_10}_masterbox $I_MATIK_CONFIG_FRITZBOX_PATH_openssl_10/config_fritz${BOX_NAME}_${FREETZ_SSL_VERSION_10}_masterbox_no 2>/dev/null	
		mv -f $I_MATIK_CONFIG_FRITZBOX_PATH_openssl_11/config_fritz${BOX_NAME}_${FREETZ_SSL_VERSION_11}_masterbox $I_MATIK_CONFIG_FRITZBOX_PATH_openssl_11/config_fritz${BOX_NAME}_${FREETZ_SSL_VERSION_11}_masterbox_no 2>/dev/null
		mv -f $I_MATIK_CONFIG_FRITZBOX_PATH_openssl_30/config_fritz${BOX_NAME}_${FREETZ_SSL_VERSION_30}_masterbox $I_MATIK_CONFIG_FRITZBOX_PATH_openssl_30/config_fritz${BOX_NAME}_${FREETZ_SSL_VERSION_30}_masterbox_no 2>/dev/null
	fi
	
	# Searching box specific config files and save them into a string array
	CONFIGS=( $(find "$FREETZ_SSL_CONFIG_PATH/" -name "config_fritz${BOX_NAME}_*wunschimage") $(find "$FREETZ_SSL_CONFIG_PATH/" -name "config_fritz${BOX_NAME}_*masterbox") $(find "$FREETZ_SSL_CONFIG_PATH/" -name "config_fritz${BOX_NAME}_*clientbox") $(find "$FREETZ_SSL_CONFIG_PATH/" -name "config_fritz${BOX_NAME}_*powerline") $(find "$FREETZ_SSL_CONFIG_PATH/" -name "config_fritz${BOX_NAME}_*repeater") )
	printf "\nFound ${FREETZ_NAME} config files for ${GREEN}${BOX_NAME} SSL ${SSL_VERSION}${NC}:\n"
	echo "${CONFIGS[@]}" | tr ' ' '\n' && printf "\n" && sleep 1 
	
	# Loop through found config files
	for conf in "${CONFIGS[@]}"; do
		cp -f "$conf" .config	#copy box config to .config
		sed -i "s+FREETZ_JLEVEL=20+FREETZ_JLEVEL=$MAX_CPUS+g" $FREETZ_SSL_HOME_PATH/.config
	
	if [ -z $PARAM_CM ]; then
	        sleep 0
	else
		source $I_MATIK_PATH/support/freetz/scripts/packages/callmonitor_on
	fi
	
	if [ -z $PARAM_RR ]; then
	        sleep 0
	else
		source $I_MATIK_PATH/support/freetz/scripts/packages/rrdstats_on
		source $I_MATIK_PATH/support/freetz/scripts/packages/cifsmount_on
	fi
	
	if [ -z $PARAM_USER_SCRIPTS ]; then
	        sleep 0
	else
	        ln -s $USER_APPLICATION_ON $I_MATIK_PATH/user-application_please_edit_me 2>/dev/null
		source $USER_APPLICATION_ON
	fi

		source $I_MATIK_PATH/support/freetz/scripts/patches/patches_on
			
	if [ -z $PARAM_CONFIG ]; then
			$MENUC $MENUC1 #run make menuconfig
		else
			$NOMENUC $NOMENUC1 #run make olddefconfig
	fi
		#echo "starte make -j$MAX_CPUS" && sleep 2 #echo command 2 seconds for progress
		make -j$MAX_CPUS #run make for freetz
		
		# Get custom image file name part from .config
		FUD_COMMENT="$(grep '^FREETZ_USER_DEFINED_COMMENT=' .config | awk -F'"' '{print $2}' | xargs)"
		FUD_COMMENT_BOX="$(echo $FUD_COMMENT | awk -F'_' '{print $NF}')"
		FUD_COMMENT_SSL="${FUD_COMMENT/"_${FUD_COMMENT_BOX}"/""}"
		
		# Construct image filename generated in freetz-ng (original)
		#openssl_1_1_x_masterbox_7490_07.29.all_$FREETZNGVERSION-$FREETZNGVERSION1.image
		IMAGE_ORIGINAL_FILENAME="${FUD_COMMENT}_${BOX_NAME}_*_${FREETZ_NAME}-${FREETZ_VERSION}.image"
		IMAGE_ORIGINAL_FILENAME="$(find "$FREETZ_SSL_HOME_PATH/$END_IMAGE_PATH/" -maxdepth 1 -iname "${IMAGE_ORIGINAL_FILENAME}" -exec basename {} \;)" # find file case intensitive
		
		# Construct image filename for saving (renamed)
		#7490_07.29.all_$FREETZNGVERSION-$FREETZNGVERSION1-masterbox_openssl_1_1_x.image
		IMAGE_RENAMED_FILENAME="${IMAGE_ORIGINAL_FILENAME/"${FUD_COMMENT}_"/""}"
		IMAGE_RENAMED_FILENAME="${IMAGE_RENAMED_FILENAME/".image"/""}"
		IMAGE_RENAMED_FILENAME="${IMAGE_RENAMED_FILENAME}-${FUD_COMMENT_BOX}_${FUD_COMMENT_SSL}.image"
		cp -f "$FREETZ_SSL_HOME_PATH/$END_IMAGE_PATH/$IMAGE_ORIGINAL_FILENAME" "$FREETZ_IMAGE_PATH/$END_IMAGE_PATH/$BOX_NAME/$IMAGE_RENAMED_FILENAME" # copy image filename to renamed filename

		#echo "starte image2inmemory" && sleep 2 #echo command 2 seconds for progress
	if [ -z $PARAM_SKIP_I2M ]; then
			$FREETZ_SSL_HOME_PATH/tools/$IMAGE2MEMORY

			# Construct inmemory filename generated in freetz-ng (original)
			#openssl_1_1_x_masterbox_7490_07.29.all_$FREETZNGVERSION-$FREETZNGVERSION1.image.inmemory
			IMAGE_ORIGINAL_FILENAME="${IMAGE_ORIGINAL_FILENAME}.inmemory"
			
			# Construct inmemory filename for saving (renamed)
			#7490_07.29.all_$FREETZNGVERSION-$FREETZNGVERSION1-masterbox_openssl_1_1_x.image.inmemory
			IMAGE_RENAMED_FILENAME="${IMAGE_RENAMED_FILENAME}.inmemory"
			mv "$FREETZ_SSL_HOME_PATH/$END_IMAGE_PATH/$IMAGE_ORIGINAL_FILENAME" "$FREETZ_IMAGE_PATH/$END_IMAGE_INMEMORY_PATH/$BOX_NAME/$IMAGE_RENAMED_FILENAME" # move inmemory filename to renamed filename
	fi

		sed -i "s+FREETZ_JLEVEL=$MAX_CPUS+FREETZ_JLEVEL=20+g" $FREETZ_SSL_HOME_PATH/.config
	
	# skins to static.pkg
	if [ -z $PARAM_SKINS ]; then
	       sleep 0
	else
	       source $I_MATIK_PATH/support/freetz/scripts/packages/skins_off
	fi
	
	if [ -z $PARAM_CM ]; then
	        sleep 0
	else
		source $I_MATIK_PATH/support/freetz/scripts/packages/callmonitor_off
	fi
	
	if [ -z $PARAM_RR ]; then
	        sleep 0
	else
		source $I_MATIK_PATH/support/freetz/scripts/packages/rrdstats_off
		source $I_MATIK_PATH/support/freetz/scripts/packages/cifsmount_off
	fi
	
	if [ -z $PARAM_USER_SCRIPTS ]; then
	        sleep 0
	else
		source $USER_APPLICATION_OFF
	fi
			
		#echo "mv .$configto to $config" && sleep 2 #echo command 2 seconds for progress
		mv .config "$conf" #move back updated .config to box config
		rm -f "$FREETZ_SSL_HOME_PATH/$END_IMAGE_PATH/"* # cleanup image folder

	done;
	
	if [ -z $PARAM_SKIP_CLIENT ]; then
	        sleep 0
	else
		mv -f $I_MATIK_CONFIG_FRITZBOX_PATH_openssl_10/config_fritz${BOX_NAME}_${FREETZ_SSL_VERSION_10}_clientbox_no $I_MATIK_CONFIG_FRITZBOX_PATH_openssl_10/config_fritz${BOX_NAME}_${FREETZ_SSL_VERSION_10}_clientbox 2>/dev/null
		mv -f $I_MATIK_CONFIG_FRITZBOX_PATH_openssl_11/config_fritz${BOX_NAME}_${FREETZ_SSL_VERSION_11}_clientbox_no $I_MATIK_CONFIG_FRITZBOX_PATH_openssl_11/config_fritz${BOX_NAME}_${FREETZ_SSL_VERSION_11}_clientbox 2>/dev/null
		mv -f $I_MATIK_CONFIG_FRITZBOX_PATH_openssl_30/config_fritz${BOX_NAME}_${FREETZ_SSL_VERSION_30}_clientbox_no $I_MATIK_CONFIG_FRITZBOX_PATH_openssl_30/config_fritz${BOX_NAME}_${FREETZ_SSL_VERSION_30}_clientbox 2>/dev/null
	fi
	
	if [ -z $PARAM_SKIP_MASTER ]; then
	        sleep 0
	else
		mv -f $I_MATIK_CONFIG_FRITZBOX_PATH_openssl_10/config_fritz${BOX_NAME}_${FREETZ_SSL_VERSION_10}_masterbox_no $I_MATIK_CONFIG_FRITZBOX_PATH_openssl_10/config_fritz${BOX_NAME}_${FREETZ_SSL_VERSION_10}_masterbox 2>/dev/null
		mv -f $I_MATIK_CONFIG_FRITZBOX_PATH_openssl_11/config_fritz${BOX_NAME}_${FREETZ_SSL_VERSION_11}_masterbox_no $I_MATIK_CONFIG_FRITZBOX_PATH_openssl_11/config_fritz${BOX_NAME}_${FREETZ_SSL_VERSION_11}_masterbox 2>/dev/null
		mv -f $I_MATIK_CONFIG_FRITZBOX_PATH_openssl_30/config_fritz${BOX_NAME}_${FREETZ_SSL_VERSION_30}_masterbox_no $I_MATIK_CONFIG_FRITZBOX_PATH_openssl_30/config_fritz${BOX_NAME}_${FREETZ_SSL_VERSION_30}_masterbox 2>/dev/null
	fi
	
	source $I_MATIK_PATH/support/freetz/scripts/patches/patches_off
	
	finish=$(date +"%s")	# build finished time
	timediff=$(($finish-$beginbs))	# build time
	[[ $COUNT > 1 ]] && printf "\n${GREEN}${BOX_NAME} SSL ${SSL_VERSION}${NC} build finished in $(($timediff / 60)) minutes and $(($timediff % 60)) seconds. ${YELLOW}<- end time $(date +"%Y-%m-%d %H:%M:%S")${NC}\n"
done
	
	[ -f .config_backup ] && mv .config_backup .config	# rename backup config to original config

#end point this shows you how long it took him to create the images
finish=$(date +"%s")	# script finished time
timediff=$(($finish-$begin))	# script time
avg=$(($timediff / $COUNT))		# average time for box
printf "\nBuild time was $(($timediff / 60)) minutes and $(($timediff % 60)) seconds for ${COUNT} box(es). ->  $(($avg / 60))m $(($avg % 60))s per box\n"
$I_MATIK_VERSION	# show i-matik disclaimer
