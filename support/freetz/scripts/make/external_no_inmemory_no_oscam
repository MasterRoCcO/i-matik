#!/bin/bash
NC='\033[0m' 		# RESET color
RED='\033[0;31m'	# RED color
GREEN='\033[0;32m'	# GREEN color
BLUE='\033[0;34m'	# BLUE color
YELLOW='\033[0;33m'	# YELLOW color

# Evaluate commandline parameter
while [ $# -ne 0 ];do
    case "$1" in
	-c|--config)			PARAM_CONFIG=1
	    ;;
	-s|--skip-image2memory)	 	PARAM_SKIP_I2M=1
	    ;;
	-nc|--no-clientbox)		PARAM_SKIP_CLIENT=1
	    ;;
	-nm|--no-masterbox)		PARAM_SKIP_MASTER=1
	    ;;
	-kp|--kernel-precompiled)       PARAM_KERNEL=1
	    ;;
	-kc|--kernel-clean)		PARAM_KERNEL_CLEAN=1
	    ;;
	-ta|--toolchain-activate)       PARAM_TOOLCHAIN_ACTIVATE=1
	    ;;
	-td|--toolchain-disable)	PARAM_TOOLCHAIN_DISABLE=1
	    ;;
	-tc|--toolchain-clean)		PARAM_TOOLCHAIN_CLEAN=1
	    ;;
	-cm|--callmonitor)		PARAM_CM=1
	    ;;
	-rr|--rrdstats)			PARAM_RR=1
	    ;;
	-us|--user-skins)		PARAM_SKINS=1
	    ;;
	-ua|--user-application)		PARAM_USER_SCRIPTS=1
	    ;;
	-*|--*)				PARAM_BAD=1
	    ;;
	*)				BOX_SSL+=( $1 )
	    ;;
    esac
    shift
done
COUNT="${#BOX_SSL[@]}"	# parameter count

# Generate list of supported devices
SUPPORTED_BOX_TYPE_LIST="$(find "$CONFIG_FRITZBOX_PATH" -name "config_fritz*_*" -type f -exec basename {} \; | awk -F'_' '{print $2}')"
SUPPORTED_BOX_TYPE_LIST="${SUPPORTED_BOX_TYPE_LIST//"fritz"/""}"
SUPPORTED_BOX_TYPE_LIST="$(echo $SUPPORTED_BOX_TYPE_LIST | tr ' ' '\n' | sort | uniq | tr '\n' ' ')"

# Generate list of supported ssl versions
SUPPORTED_SSL_NUMBER_LIST="$(find "$CONFIG_FRITZBOX_PATH" -name "ssl_*" -type d -exec basename {} \;  | awk -F'_' '{print $2}')"
SUPPORTED_SSL_NUMBER_LIST="$(echo $SUPPORTED_SSL_NUMBER_LIST | tr ' ' '\n' | sort | uniq | tr '\n' ' ')"

begin=$(date +"%s")	# script start time
# Loop through string array of boxes
for bs in "${BOX_SSL[@]}"; do

	# Get box and ssl variables
	BOX_NAME="$(echo $bs | awk -F'.' '{print $1}')"	# extract box type
	BOX_SSL="$(echo $bs | awk -F'.' '{print $2}')"	# extract ssl number
	[[ $BOX_SSL == ?(-)+([0-9]) ]] && SSL_VERSION="${BOX_SSL:0:1}.${BOX_SSL:1:1}.x" || SSL_VERSION="${BOX_SSL,,}" # translate ssl number to version string

	# Check box is supported
	MATCH_BOX="$(echo $SUPPORTED_BOX_TYPE_LIST | grep -wo $BOX_NAME)"
	MATCH_SSL="$(echo $SUPPORTED_SSL_NUMBER_LIST | grep -wo $BOX_SSL)"
	if [ -z "$MATCH_BOX" -o -z "$MATCH_SSL" ]; then
		[ -z "$MATCH_BOX" ] && COLOR_BOX="${RED}" || COLOR_BOX="${YELLOW}"
		[ -z "$MATCH_SSL" ] && COLOR_SSL="${RED}" || COLOR_SSL="${YELLOW}"
		printf "\n${COLOR_BOX}${BOX_NAME}${NC} ${COLOR_SSL}SSL ${SSL_VERSION}${NC} ${YELLOW}currently not supported!${NC}\n"
		continue
	fi

	BOX_ARCH="$(grep '^FREETZ_TARGET_ARCH_ENDIANNESS_DEPENDENT=' $BOX_ARCH_PATH/${BOX_NAME} | awk -F'"' '{print $2}' | xargs)" 2>/dev/null
	BOX_HOME="${BOX_ARCH}"	# set box home folder
	FREETZ_SSL_PATH="FREETZ_PATH_SSL_${BOX_SSL^^}"	# dynamic variable
	FREETZ_SSL_CONFIG_PATH="CONFIG_FRITZBOX_PATH_SSL_${BOX_SSL,,}"	# dynamic variable

	FREETZ_SSL_HOME_PATH="${!FREETZ_SSL_PATH}/$BOX_HOME"	# evaluate dynamic variable
	FREETZ_SSL_CONFIG_PATH="${!FREETZ_SSL_CONFIG_PATH}"		# evaluate dynamic variable

	let COUNTER++	# counter variable + 1
	beginbs=$(date +"%s")	# build start time
	printf "\n${COUNTER}/${COUNT}: Building ${GREEN}${BOX_NAME} SSL ${SSL_VERSION}${NC} freetz-ng image, please wait ... ${YELLOW}-> start time $(date +"%Y-%m-%d %H:%M:%S")${NC}\n\n"

	if [ ! -e "$FREETZ_SSL_HOME_PATH" ]; then
		umask 0022
		git clone https://github.com/Freetz-NG/freetz-ng "$FREETZ_SSL_HOME_PATH"
		rm -rf "$FREETZ_SSL_HOME_PATH/addon"
		cp -ar /$MY_FILES_HOME_PATH/make/* "$FREETZ_SSL_HOME_PATH/make/"
		ln -s /$MY_FILES_HOME_PATH/addon "$FREETZ_SSL_HOME_PATH/addon"
		source $PRIVAT_MY_FILES_SCRIPT 2>/dev/null
	elif [ ! -d "$FREETZ_SSL_HOME_PATH" ]; then
		printf "${YELLOW}'$FREETZ_SSL_HOME_PATH' already exists but is not a directory${NC}" 1>&2
		exit 1
	fi

	# Create directory for saving built images
	mkdir -p $FREETZ_IMAGE_PATH/$END_IMAGE_PATH/$BOX_NAME 2>/dev/null	# create images folder
	#[ -z $PARAM_SKIP_I2M ] && mkdir -p $FREETZ_IMAGE_PATH/$END_IMAGE_INMEMORY_PATH/$BOX_NAME 2>/dev/null	# create inmemory folder, when it is not disabled

	# skins to static.pkg
	if [ -z $PARAM_SKINS ]; then
		sleep 0
	else
		source $I_MATIK_PATH/support/freetz/scripts/pkgs_on_off/skins_on
	fi

	# update git working copy
	cd "$FREETZ_SSL_HOME_PATH" && git pull
	umask 0022
	cp -ar /$MY_FILES_HOME_PATH/make/* "$FREETZ_SSL_HOME_PATH/make/" 2>/dev/null
	source $PRIVAT_MY_FILES_SCRIPT 2>/dev/null
	source $PATCH_ON
	source $PRIVAT_PATCH_ON 2>/dev/null
	sed -i "s+The installed version on this device is currently xxxx+The installed version on this device is currently ${VERSIONS_NR}+g" $FREETZ_SSL_HOME_PATH/make/pkgs/mod/files/root/usr/mww/cgi-bin/i-matik.cgi
	sed -i "s+xxxx+${VERSIONS_NR}+g" $FREETZ_SSL_HOME_PATH/make/pkgs/mod/files/root/usr/lib/cgi-bin/mod/info.cgi
	sed -i "s+Version xxx+Version ${VERSIONS_NR}+g" $FREETZ_SSL_HOME_PATH/make/pkgs/mod/files/root/etc/default.mod/motd
	sed -i "s+i-matik: xxx+i-matik: ${VERSIONS_NR}+g" $FREETZ_SSL_HOME_PATH/make/pkgs/mod/files/root/usr/mww/cgi-bin/status.d/10-box.sh
	sed -i "s+xxxxx+${VERSIONS_NR}+g" $VERSION
	[ -f .config ] && mv .config .config_backup	# rename original config to backup config
	FREETZ_NAME="$(tools/freetz_revision 2>&1 | awk '{print $1}' | xargs)"	# freetz-ng name
	FREETZ_VERSION="$(tools/freetz_revision 2>&1 | awk '{print $2}' | xargs)"	# freetz-ng version string

	if [ -z $PARAM_SKIP_CLIENT ]; then
		sleep 0
	else
		mv -f $CONFIG_FRITZBOX_PATH_SSL_10/config_fritz${BOX_NAME}_${FREETZ_SSL_VERSION_10}_clientbox $CONFIG_FRITZBOX_PATH_SSL_10/config_fritz${BOX_NAME}_${FREETZ_SSL_VERSION_10}_clientbox_no 2>/dev/null	
		mv -f $CONFIG_FRITZBOX_PATH_SSL_11/config_fritz${BOX_NAME}_${FREETZ_SSL_VERSION_11}_clientbox $CONFIG_FRITZBOX_PATH_SSL_11/config_fritz${BOX_NAME}_${FREETZ_SSL_VERSION_11}_clientbox_no 2>/dev/null
		mv -f $CONFIG_FRITZBOX_PATH_SSL_30/config_fritz${BOX_NAME}_${FREETZ_SSL_VERSION_30}_clientbox $CONFIG_FRITZBOX_PATH_SSL_30/config_fritz${BOX_NAME}_${FREETZ_SSL_VERSION_30}_clientbox_no 2>/dev/null
	fi

	if [ -z $PARAM_SKIP_MASTER ]; then
		sleep 0
	else
		mv -f $CONFIG_FRITZBOX_PATH_SSL_10/config_fritz${BOX_NAME}_${FREETZ_SSL_VERSION_10}_masterbox $CONFIG_FRITZBOX_PATH_SSL_10/config_fritz${BOX_NAME}_${FREETZ_SSL_VERSION_10}_masterbox_no 2>/dev/null	
		mv -f $CONFIG_FRITZBOX_PATH_SSL_11/config_fritz${BOX_NAME}_${FREETZ_SSL_VERSION_11}_masterbox $CONFIG_FRITZBOX_PATH_SSL_11/config_fritz${BOX_NAME}_${FREETZ_SSL_VERSION_11}_masterbox_no 2>/dev/null
		mv -f $CONFIG_FRITZBOX_PATH_SSL_30/config_fritz${BOX_NAME}_${FREETZ_SSL_VERSION_30}_masterbox $CONFIG_FRITZBOX_PATH_SSL_30/config_fritz${BOX_NAME}_${FREETZ_SSL_VERSION_30}_masterbox_no 2>/dev/null
	fi

	# Searching box specific config files and save them into a string array
	CONFIGS=( $(find "$FREETZ_SSL_CONFIG_PATH/" -name "config_fritz${BOX_NAME}_*wunschimage") $(find "$FREETZ_SSL_CONFIG_PATH/" -name "config_fritz${BOX_NAME}_*masterbox") $(find "$FREETZ_SSL_CONFIG_PATH/" -name "config_fritz${BOX_NAME}_*clientbox") $(find "$FREETZ_SSL_CONFIG_PATH/" -name "config_fritz${BOX_NAME}_*powerline") $(find "$FREETZ_SSL_CONFIG_PATH/" -name "config_fritz${BOX_NAME}_*repeater") )
	printf "\nFound ${FREETZ_NAME} config files for ${GREEN}${BOX_NAME} SSL ${SSL_VERSION}${NC}:\n"
	echo "${CONFIGS[@]}" | tr ' ' '\n' && printf "\n" && sleep 1 

	# Loop through found config files
	for conf in "${CONFIGS[@]}"; do
		cp -f "$conf" .config	#copy box config to .config
		sed -i "s+FREETZ_JLEVEL=20+FREETZ_JLEVEL=$MAX_CPUS+g" $FREETZ_SSL_HOME_PATH/.config
		sed -i "s+FREETZ_DOWNLOAD_TOOLCHAIN=y+# FREETZ_DOWNLOAD_TOOLCHAIN is not set+g" $FREETZ_SSL_HOME_PATH/.config 2>/dev/null
		sed -i "s+FREETZ_TOOLCHAIN_CCACHE=y+# FREETZ_TOOLCHAIN_CCACHE is not set+g" $FREETZ_SSL_HOME_PATH/.config 2>/dev/null
		sed -i "s+FREETZ_UBOOT_STATIC=y+# FREETZ_UBOOT_STATIC is not set+g" $FREETZ_SSL_HOME_PATH/.config 2>/dev/null
		sed -i "s+FREETZ_ROOTEMU_FAKEROOT=y+# FREETZ_ROOTEMU_FAKEROOT is not set+g" $FREETZ_SSL_HOME_PATH/.config 2>/dev/null
		sed -i "s+# FREETZ_ROOTEMU_PSEUDO is not set+FREETZ_ROOTEMU_PSEUDO=y+g" $FREETZ_SSL_HOME_PATH/.config 2>/dev/null
		sed -i "s+FREETZ_HOSTTOOLS_DOWNLOAD=y+# FREETZ_HOSTTOOLS_DOWNLOAD is not set+g" $FREETZ_SSL_HOME_PATH/.config 2>/dev/null
		sed -i "s+$MASTERBOX_ALT+$MASTERBOX_NEU+g" $FREETZ_SSL_HOME_PATH/.config 2>/dev/null
		sed -i "s+$CLIENTBOX_ALT+$CLIENTBOX_NEU+g" $FREETZ_SSL_HOME_PATH/.config 2>/dev/null
		sed -i "s+$POWERLINE_ALT+$POWERLINE_NEU+g" $FREETZ_SSL_HOME_PATH/.config 2>/dev/null
		sed -i "s+$REPEATER_ALT+$REPEATER_NEU+g" $FREETZ_SSL_HOME_PATH/.config 2>/dev/null
		sed -i "s+$WUNSCHIMAGE_ALT+$WUNSCHIMAGE_NEU+g" $FREETZ_SSL_HOME_PATH/.config 2>/dev/null

	if [ -z $PARAM_TOOLCHAIN_ACTIVATE ]; then
		sleep 0
	else
		sed -i "s+FREETZ_BUILD_TOOLCHAIN=y+# FREETZ_BUILD_TOOLCHAIN is not set+g" $FREETZ_SSL_HOME_PATH/.config 2>/dev/null
		sed -i "s+# FREETZ_TOOLCHAIN_CCACHE is not set+FREETZ_TOOLCHAIN_CCACHE=y+g" $FREETZ_SSL_HOME_PATH/.config 2>/dev/null
		sed -i "s+# FREETZ_DOWNLOAD_TOOLCHAIN is not set+FREETZ_DOWNLOAD_TOOLCHAIN=y+g" $FREETZ_SSL_HOME_PATH/.config 2>/dev/null
		sed -i "s+# FREETZ_HOSTTOOLS_DOWNLOAD is not set+FREETZ_HOSTTOOLS_DOWNLOAD=y+g" $FREETZ_SSL_HOME_PATH/.config 2>/dev/null

	fi

	if [ -z $PARAM_TOOLCHAIN_DISABLE ]; then
		sleep 0
	else
		sed -i "s+# FREETZ_BUILD_TOOLCHAIN is not set+FREETZ_BUILD_TOOLCHAIN=y+g" $FREETZ_SSL_HOME_PATH/.config 2>/dev/null
		sed -i "s+FREETZ_DOWNLOAD_TOOLCHAIN=y+# FREETZ_DOWNLOAD_TOOLCHAIN is not set+g" $FREETZ_SSL_HOME_PATH/.config 2>/dev/null
		sed -i "s+FREETZ_TOOLCHAIN_CCACHE=y+# FREETZ_TOOLCHAIN_CCACHE is not set+g" $FREETZ_SSL_HOME_PATH/.config 2>/dev/null
		sed -i "s+FREETZ_HOSTTOOLS_DOWNLOAD=y+# FREETZ_HOSTTOOLS_DOWNLOAD is not set+g" $FREETZ_SSL_HOME_PATH/.config 2>/dev/null
		make clean
	fi

	if [ -z $PARAM_KERNEL ]; then
		sleep 0
	else
		make kernel-precompiled #run make kernel-precompiled
	fi

	if [ -z $PARAM_KERNEL_CLEAN ]; then
		sleep 0
	else
		make kernel-dirclean #run make kernel-dirclean
	fi

	if [ -z $PARAM_TOOLCHAIN_CLEAN ]; then
		sleep 0
	else
		make target-toolchain-clean  #run target-toolchain-clean
	fi

		sed -i "s+# EXTERNAL_ENABLED is not set+EXTERNAL_ENABLED=y+g" $FREETZ_SSL_HOME_PATH/.config

ed $FREETZ_SSL_HOME_PATH/.config <<EOF
/EXTERNAL_ENABLED=y/a
EXTERNAL_UDEVM=y
EXTERNAL_NOEXEC=y
EXTERNAL_SUBDIRS=y
EXTERNAL_DYNAMIC=y
EXTERNAL_DYNAMIC_SCRIPTS=y
EXTERNAL_CREATEPAK=y
EXTERNAL_OWN_FILES=""

#
# packages
#
EXTERNAL_FREETZ_PACKAGE_DROPBEAR=y
EXTERNAL_FREETZ_PACKAGE_MC=y
# EXTERNAL_LINKS is not set
# EXTERNAL_CREATEPAK_DYNAMIC is not set
EXTERNAL_FREETZ_PACKAGE_PCSC_LITE=y
# EXTERNAL_FREETZ_PACKAGE_USBIDS is not set
# EXTERNAL_FREETZ_PACKAGE_USBUTILS is not set
EXTERNAL_FREETZ_PACKAGE_STRACE=y
.
wq
EOF

		source $PKGS_ON
		source $KERNEL_ON

	if [ -z $PARAM_CONFIG ]; then
			make $MENUC #run make menuconfig
		else
			make $NOMENUC #run make olddefconfig
	fi

		source $NO_KERNEL
		source $NO_REPLACE_KERNEL

		#echo "starte make -j$MAX_CPUS" && sleep 2 #echo command 2 seconds for progress
		make -j$MAX_CPUS #run make for freetz

		# Get custom image file name part from .config
		FUD_COMMENT="$(grep '^FREETZ_USER_DEFINED_COMMENT=' .config | awk -F'"' '{print $2}' | xargs)"
		#FUD_COMMENT_BOX="$(echo $FUD_COMMENT | awk -F'_' '{print $NF}')"
		FUD_COMMENT_BOX="$(echo $FUD_COMMENT)"
		FUD_COMMENT_SSL="${FUD_COMMENT/"_${FUD_COMMENT_BOX}"/""}"
		FB_OS_COMMENT="$(grep '^FREETZ_TYPE_PREFIX_SERIES_SUBDIR=' .config | awk -F'"' '{print $2}' | xargs)"
		FB_OS="os${FB_OS_COMMENT:1:1}${FB_OS_COMMENT:3:1}"
		FB_OS_DEL="${FB_OS_COMMENT:1:1}.${FB_OS_COMMENT:3:1}*"
		FB_SSL="ssl_${BOX_SSL:0:1}_${BOX_SSL:1:1}_x"
		FB_ARCH="$(grep '^FREETZ_TARGET_ARCH_ENDIANNESS_DEPENDENT=' .config | awk -F'"' '{print $2}' | xargs)"
		FB_TYPE="${BOX_NAME}_${FB_OS}_${FB_SSL}_${FB_ARCH}"
		
		# Remove older image files
		DELETE_IMAGE_NAME="*$(echo ${FB_OS_DEL}*${FB_SSL}_${FUD_COMMENT}).image"	# construct image filname filter
		find "$FREETZ_IMAGE_PATH/$END_IMAGE_PATH/$BOX_NAME/" -name "${DELETE_IMAGE_NAME}" -type f -mmin +$DELETE_IMAGES -delete 2>/dev/null
		#find "$FREETZ_IMAGE_PATH/$END_IMAGE_INMEMORY_PATH/$BOX_NAME/" -name "${DELETE_IMAGE_NAME}.inmemory" -type f -mmin +$DELETE_IMAGES -delete 2>/dev/null
		DELETE_IMAGE_NAME_EXT="*$(echo ${FB_OS_DEL}*${FB_SSL}_${FUD_COMMENT}).external"	# construct image filname filter
		find "$FREETZ_IMAGE_PATH/$END_IMAGE_PATH/$BOX_NAME/" -name "${DELETE_IMAGE_NAME_EXT}" -type f -mmin +$DELETE_IMAGES -delete 2>/dev/null
		
		# Construct image filename generated in freetz-ng (original)
		#ssl_1_1_x_masterbox_7490_07.29.all_$FREETZNGVERSION-$FREETZNGVERSION1.image
		IMAGE_ORIGINAL_FILENAME="${FUD_COMMENT}_${BOX_NAME}_*_${FREETZ_NAME}-${FREETZ_VERSION}.image"
		IMAGE_ORIGINAL_FILENAME="$(find "$FREETZ_SSL_HOME_PATH/$END_IMAGE_PATH/" -maxdepth 1 -iname "${IMAGE_ORIGINAL_FILENAME}" -exec basename {} \;)" # find file case intensitive
		IMAGE_ORIGINAL_FILENAME_EXT="${FUD_COMMENT}_${BOX_NAME}_*_${FREETZ_NAME}-${FREETZ_VERSION}.external"
		IMAGE_ORIGINAL_FILENAME_EXT="$(find "$FREETZ_SSL_HOME_PATH/$END_IMAGE_PATH/" -maxdepth 1 -iname "${IMAGE_ORIGINAL_FILENAME_EXT}" -exec basename {} \;)" # find file case intensitive

		# Construct image filename for saving (renamed)
		#7490_07.29.all_$FREETZNGVERSION-$FREETZNGVERSION1-masterbox_ssl_1_1_x.image
		IMAGE_RENAMED_FILENAME="${IMAGE_ORIGINAL_FILENAME/"${FUD_COMMENT}_"/""}"
		IMAGE_RENAMED_FILENAME="${IMAGE_RENAMED_FILENAME/".image"/""}"
		IMAGE_RENAMED_FILENAME="${IMAGE_RENAMED_FILENAME}_${FB_SSL}_${FUD_COMMENT_BOX}.image"
		cp -f "$FREETZ_SSL_HOME_PATH/$END_IMAGE_PATH/$IMAGE_ORIGINAL_FILENAME" "$FREETZ_IMAGE_PATH/$END_IMAGE_PATH/$BOX_NAME/$IMAGE_RENAMED_FILENAME" # copy image filename to renamed filename
		IMAGE_RENAMED_FILENAME_EXT="${IMAGE_ORIGINAL_FILENAME_EXT/"${FUD_COMMENT}_"/""}"
		IMAGE_RENAMED_FILENAME_EXT="${IMAGE_RENAMED_FILENAME_EXT/".external"/""}"
		IMAGE_RENAMED_FILENAME_EXT="${IMAGE_RENAMED_FILENAME_EXT}_${FB_SSL}_${FUD_COMMENT_BOX}.external"
		cp -f "$FREETZ_SSL_HOME_PATH/$END_IMAGE_PATH/$IMAGE_ORIGINAL_FILENAME_EXT" "$FREETZ_IMAGE_PATH/$END_IMAGE_PATH/$BOX_NAME/$IMAGE_RENAMED_FILENAME_EXT" 2>/dev/null # copy image filename to renamed filename

		#echo "starte image2inmemory" && sleep 2 #echo command 2 seconds for progress
		if [ -z $PARAM_SKIP_I2M ]; then
			#$FREETZ_SSL_HOME_PATH/tools/$IMAGE2MEMORY

			# Construct inmemory filename generated in freetz-ng (original)
			#ssl_1_1_x_masterbox_7490_07.29.all_$FREETZNGVERSION-$FREETZNGVERSION1.image.inmemory
			IMAGE_ORIGINAL_FILENAME="${IMAGE_ORIGINAL_FILENAME}.inmemory"

			# Construct inmemory filename for saving (renamed)
			#7490_07.29.all_$FREETZNGVERSION-$FREETZNGVERSION1-masterbox_ssl_1_1_x.image.inmemory
			IMAGE_RENAMED_FILENAME="${IMAGE_RENAMED_FILENAME}.inmemory"
			#mv "$FREETZ_SSL_HOME_PATH/$END_IMAGE_PATH/$IMAGE_ORIGINAL_FILENAME" "$FREETZ_IMAGE_PATH/$END_IMAGE_INMEMORY_PATH/$BOX_NAME/$IMAGE_RENAMED_FILENAME" # move inmemory filename to renamed filename
		fi

		sed -i "s+FREETZ_JLEVEL=$MAX_CPUS+FREETZ_JLEVEL=20+g" $FREETZ_SSL_HOME_PATH/.config
		source $KERNEL_OFF

	# skins to static.pkg
	if [ -z $PARAM_SKINS ]; then
		sleep 0
	else
		source $I_MATIK_PATH/support/freetz/scripts/pkgs_on_off/skins_off
	fi

		sed -i "s+EXTERNAL_ENABLED=y+# EXTERNAL_ENABLED is not set+g" $FREETZ_SSL_HOME_PATH/.config
		sed -i "s+EXTERNAL_# FREETZ+# EXTERNAL_FREETZ+g" $FREETZ_SSL_HOME_PATH/.config 2>/dev/null
		grep -v EXTERNAL_UDEVM $FREETZ_SSL_HOME_PATH/.config  > $FREETZ_SSL_HOME_PATH/tempdatei && mv $FREETZ_SSL_HOME_PATH/tempdatei $FREETZ_SSL_HOME_PATH/.config
		grep -v EXTERNAL_NOEXEC $FREETZ_SSL_HOME_PATH/.config  > $FREETZ_SSL_HOME_PATH/tempdatei && mv $FREETZ_SSL_HOME_PATH/tempdatei $FREETZ_SSL_HOME_PATH/.config
		grep -v EXTERNAL_SUBDIRS $FREETZ_SSL_HOME_PATH/.config  > $FREETZ_SSL_HOME_PATH/tempdatei && mv $FREETZ_SSL_HOME_PATH/tempdatei $FREETZ_SSL_HOME_PATH/.config
		grep -v EXTERNAL_DYNAMIC $FREETZ_SSL_HOME_PATH/.config  > $FREETZ_SSL_HOME_PATH/tempdatei && mv $FREETZ_SSL_HOME_PATH/tempdatei $FREETZ_SSL_HOME_PATH/.config
		grep -v EXTERNAL_DYNAMIC_SCRIPTS $FREETZ_SSL_HOME_PATH/.config  > $FREETZ_SSL_HOME_PATH/tempdatei && mv $FREETZ_SSL_HOME_PATH/tempdatei $FREETZ_SSL_HOME_PATH/.config
		grep -v EXTERNAL_CREATEPAK $FREETZ_SSL_HOME_PATH/.config  > $FREETZ_SSL_HOME_PATH/tempdatei && mv $FREETZ_SSL_HOME_PATH/tempdatei $FREETZ_SSL_HOME_PATH/.config
		grep -v EXTERNAL_OWN_FILES $FREETZ_SSL_HOME_PATH/.config  > $FREETZ_SSL_HOME_PATH/tempdatei && mv $FREETZ_SSL_HOME_PATH/tempdatei $FREETZ_SSL_HOME_PATH/.config
		grep -v EXTERNAL_FREETZ_PACKAGE_DROPBEAR $FREETZ_SSL_HOME_PATH/.config  > $FREETZ_SSL_HOME_PATH/tempdatei && mv $FREETZ_SSL_HOME_PATH/tempdatei $FREETZ_SSL_HOME_PATH/.config
		grep -v EXTERNAL_FREETZ_PACKAGE_MC $FREETZ_SSL_HOME_PATH/.config  > $FREETZ_SSL_HOME_PATH/tempdatei && mv $FREETZ_SSL_HOME_PATH/tempdatei $FREETZ_SSL_HOME_PATH/.config
		grep -v EXTERNAL_LINKS  $FREETZ_SSL_HOME_PATH/.config  > $FREETZ_SSL_HOME_PATH/tempdatei && mv $FREETZ_SSL_HOME_PATH/tempdatei $FREETZ_SSL_HOME_PATH/.config
		grep -v EXTERNAL_CREATEPAK_DYNAMIC $FREETZ_SSL_HOME_PATH/.config  > $FREETZ_SSL_HOME_PATH/tempdatei && mv $FREETZ_SSL_HOME_PATH/tempdatei $FREETZ_SSL_HOME_PATH/.config
		grep -v EXTERNAL_FREETZ_PACKAGE_PCSC_LITE $FREETZ_SSL_HOME_PATH/.config  > $FREETZ_SSL_HOME_PATH/tempdatei && mv $FREETZ_SSL_HOME_PATH/tempdatei $FREETZ_SSL_HOME_PATH/.config
		grep -v EXTERNAL_FREETZ_PACKAGE_USBIDS $FREETZ_SSL_HOME_PATH/.config  > $FREETZ_SSL_HOME_PATH/tempdatei && mv $FREETZ_SSL_HOME_PATH/tempdatei $FREETZ_SSL_HOME_PATH/.config
		grep -v EXTERNAL_FREETZ_PACKAGE_USBUTILS $FREETZ_SSL_HOME_PATH/.config  > $FREETZ_SSL_HOME_PATH/tempdatei && mv $FREETZ_SSL_HOME_PATH/tempdatei $FREETZ_SSL_HOME_PATH/.config
		grep -v EXTERNAL_FREETZ_PACKAGE_STRACE $FREETZ_SSL_HOME_PATH/.config  > $FREETZ_SSL_HOME_PATH/tempdatei && mv $FREETZ_SSL_HOME_PATH/tempdatei $FREETZ_SSL_HOME_PATH/.config

		source $PKGS_OFF
		source $REPLACE_KERNEL

		#echo "mv .$configto to $config" && sleep 2 #echo command 2 seconds for progress
		mv .config "$conf" #move back updated .config to box config
		rm -f "$FREETZ_SSL_HOME_PATH/$END_IMAGE_PATH/"* # cleanup image folder
	done; 

	if [ -z $PARAM_SKIP_CLIENT ]; then
		sleep 0
	else
		mv -f $CONFIG_FRITZBOX_PATH_SSL_10/config_fritz${BOX_NAME}_${FREETZ_SSL_VERSION_10}_clientbox_no $CONFIG_FRITZBOX_PATH_SSL_10/config_fritz${BOX_NAME}_${FREETZ_SSL_VERSION_10}_clientbox 2>/dev/null
		mv -f $CONFIG_FRITZBOX_PATH_SSL_11/config_fritz${BOX_NAME}_${FREETZ_SSL_VERSION_11}_clientbox_no $CONFIG_FRITZBOX_PATH_SSL_11/config_fritz${BOX_NAME}_${FREETZ_SSL_VERSION_11}_clientbox 2>/dev/null
		mv -f $CONFIG_FRITZBOX_PATH_SSL_30/config_fritz${BOX_NAME}_${FREETZ_SSL_VERSION_30}_clientbox_no $CONFIG_FRITZBOX_PATH_SSL_30/config_fritz${BOX_NAME}_${FREETZ_SSL_VERSION_30}_clientbox 2>/dev/null
	fi

	if [ -z $PARAM_SKIP_MASTER ]; then
		sleep 0
	else
		mv -f $CONFIG_FRITZBOX_PATH_SSL_10/config_fritz${BOX_NAME}_${FREETZ_SSL_VERSION_10}_masterbox_no $CONFIG_FRITZBOX_PATH_SSL_10/config_fritz${BOX_NAME}_${FREETZ_SSL_VERSION_10}_masterbox 2>/dev/null
		mv -f $CONFIG_FRITZBOX_PATH_SSL_11/config_fritz${BOX_NAME}_${FREETZ_SSL_VERSION_11}_masterbox_no $CONFIG_FRITZBOX_PATH_SSL_11/config_fritz${BOX_NAME}_${FREETZ_SSL_VERSION_11}_masterbox 2>/dev/null
		mv -f $CONFIG_FRITZBOX_PATH_SSL_30/config_fritz${BOX_NAME}_${FREETZ_SSL_VERSION_30}_masterbox_no $CONFIG_FRITZBOX_PATH_SSL_30/config_fritz${BOX_NAME}_${FREETZ_SSL_VERSION_30}_masterbox 2>/dev/null
	fi
		source $PATCH_OFF
		source $PRIVAT_PATCH_OFF 2>/dev/null

	finish=$(date +"%s")	# build finished time
	timediff=$(($finish-$beginbs))	# build time
	[[ $COUNT > 1 ]] && printf "\n${GREEN}${BOX_NAME} SSL ${SSL_VERSION}${NC} build finished in $(($timediff / 60)) minutes and $(($timediff % 60)) seconds. ${YELLOW}<- end time $(date +"%Y-%m-%d %H:%M:%S")${NC}\n"

done

	[ -f .config_backup ] && mv .config_backup .config	# rename backup config to original config

#end point this shows you how long it took him to create the images
finish=$(date +"%s")	# script finished time
timediff=$(($finish-$begin))	# script time
avg=$(($timediff / $COUNT))		# average time for box
printf "\nBuild time was $(($timediff / 60)) minutes and $(($timediff % 60)) seconds for ${COUNT} box(es). ->  $(($avg / 60))m $(($avg % 60))s per box\n"
$VERSION	# show i-matik disclaimer
sed -i "s+${VERSIONS_NR}+xxxxx+g" $VERSION
