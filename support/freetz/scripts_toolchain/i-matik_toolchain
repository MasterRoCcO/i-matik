#!/bin/bash
NC='\033[0m' 		# RESET color
RED='\033[0;31m'	# RED color
GREEN='\033[0;32m'	# GREEN color
BLUE='\033[0;34m'	# BLUE color
YELLOW='\033[0;33m'	# YELLOW color

# Evaluate commandline parameter
while [ $# -ne 0 ];do
    case "$1" in
	-dd|--config)			PARAM_CONFIG=1
	    ;;
	-s|--skip-image2memory)		PARAM_SKIP_I2M=1
	    ;;
	-*|--*)				PARAM_BAD=1
	    ;;
	*)				BOX_SSL+=( $1 )
	    ;;
    esac
    shift
done
COUNT="${#BOX_SSL[@]}"	# parameter count

# Generate list of supported devices
SUPPORTED_BOX_TYPE_LIST="$(find "$I_MATIK_PATH/support/" -name "config_fritz*_*" -type f -exec basename {} \; | awk -F'_' '{print $2}')"
SUPPORTED_BOX_TYPE_LIST="${SUPPORTED_BOX_TYPE_LIST//"fritz"/""}"
SUPPORTED_BOX_TYPE_LIST="$(echo $SUPPORTED_BOX_TYPE_LIST | tr ' ' '\n' | sort | uniq | tr '\n' ' ')"

# Generate list of supported ssl versions
SUPPORTED_SSL_NUMBER_LIST="$(find "$I_MATIK_PATH/support/" -name "openssl_*" -type d -exec basename {} \;  | awk -F'_' '{print $2}')"
SUPPORTED_SSL_NUMBER_LIST="$(echo $SUPPORTED_SSL_NUMBER_LIST | tr ' ' '\n' | sort | uniq | tr '\n' ' ')"

begin=$(date +"%s")	# script start time
# Loop through string array of boxes
for bs in "${BOX_SSL[@]}"; do

	# Get box and ssl variables
	BOX_NAME="$(echo $bs | awk -F'.' '{print $1}')"	# extract box type
	BOX_SSL="$(echo $bs | awk -F'.' '{print $2}')"	# extract ssl number
	[[ $BOX_SSL == ?(-)+([0-9]) ]] && SSL_VERSION="${BOX_SSL:0:1}.${BOX_SSL:1:1}.x" || SSL_VERSION="${BOX_SSL,,}" # translate ssl number to version string
	
	# Check box is supported
	MATCH_BOX="$(echo $SUPPORTED_BOX_TYPE_LIST | grep -wo $BOX_NAME)"
	MATCH_SSL="$(echo $SUPPORTED_SSL_NUMBER_LIST | grep -wo $BOX_SSL)"
	if [ -z "$MATCH_BOX" -o -z "$MATCH_SSL" ]; then
		[ -z "$MATCH_BOX" ] && COLOR_BOX="${RED}" || COLOR_BOX="${YELLOW}"
		[ -z "$MATCH_SSL" ] && COLOR_SSL="${RED}" || COLOR_SSL="${YELLOW}"
		#printf "\n${COLOR_BOX}${BOX_NAME}${NC} ${COLOR_SSL}SSL ${SSL_VERSION}${NC} ${YELLOW}currently not supported!${NC}\n"
		continue
	fi
	
	BOX_ARCH="$(grep '^FREETZ_TARGET_ARCH_ENDIANNESS_DEPENDENT=' $I_MATIK_BOX_ARCH_PATH/${BOX_NAME} | awk -F'"' '{print $2}' | xargs)" 2>/dev/null
	BOX_HOME="${BOX_ARCH}"	# set box home folder
	FREETZ_SSL_PATH="FREETZ_PATH_SSL_${BOX_SSL^^}"	# dynamic variable
	FREETZ_SSL_CONFIG_PATH="I_MATIK_CONFIG_FRITZBOX_PATH_openssl_${BOX_SSL,,}"	# dynamic variable

	FREETZ_SSL_HOME_PATH="${!FREETZ_SSL_PATH}/$BOX_HOME"	# evaluate dynamic variable
	FREETZ_SSL_CONFIG_PATH="${!FREETZ_SSL_CONFIG_PATH}"		# evaluate dynamic variable

	let COUNTER++	# counter variable + 1
	beginbs=$(date +"%s")	# build start time
	printf "\n Building ${GREEN}${BOX_NAME} for freetz-ng, please wait ... ${YELLOW}-> start time $(date +"%Y-%m-%d %H:%M:%S")${NC}\n\n"
	
	if [ ! -e "$FREETZ_SSL_HOME_PATH" ]; then
		umask 0022
		git clone https://github.com/Freetz-NG/freetz-ng "$FREETZ_SSL_HOME_PATH"
	elif [ ! -d "$FREETZ_SSL_HOME_PATH" ]; then
		printf "${YELLOW}'$FREETZ_SSL_HOME_PATH' already exists but is not a directory${NC}" 1>&2
		exit 1
	fi
	
	# update git working copy
	cd "$FREETZ_SSL_HOME_PATH" && git pull
	umask 0022
	FREETZ_NAME="$(tools/freetz_revision 2>&1 | awk '{print $1}' | xargs)"	# freetz-ng name
	FREETZ_VERSION="$(tools/freetz_revision 2>&1 | awk '{print $2}' | xargs)"	# freetz-ng version string
	
	# Searching box specific config files and save them into a string array
	CONFIGS=( $(find "$FREETZ_SSL_CONFIG_PATH/" -name "config_fritz${BOX_NAME}_*wunschimage") $(find "$FREETZ_SSL_CONFIG_PATH/" -name "config_fritz${BOX_NAME}_*masterbox") $(find "$FREETZ_SSL_CONFIG_PATH/" -name "config_fritz${BOX_NAME}_*clientbox") $(find "$FREETZ_SSL_CONFIG_PATH/" -name "config_fritz${BOX_NAME}_*powerline") $(find "$FREETZ_SSL_CONFIG_PATH/" -name "config_fritz${BOX_NAME}_*repeater") )
	printf "\nFound ${FREETZ_NAME} config files for ${GREEN}${BOX_NAME} SSL ${SSL_VERSION}${NC}:\n"
	echo "${CONFIGS[@]}" | tr ' ' '\n' && printf "\n" && sleep 1 

	
	cp -ar $I_MATIK_PATH/support/freetz/patches/dl-toolchains_make.patch "$FREETZ_SSL_HOME_PATH/" 2>/dev/null
	patch -p0 -b < dl-toolchains_make.patch
	rm -rf "$FREETZ_SSL_HOME_PATH/dl-toolchains_make.patch" 2>/dev/null
		
	cp -ar $I_MATIK_PATH/support/freetz/patches/download-toolchain.mk.patch "$FREETZ_SSL_HOME_PATH/" 2>/dev/null
	patch -p0 -b < download-toolchain.mk.patch
	rm -rf "$FREETZ_SSL_HOME_PATH/download-toolchain.mk.patch" 2>/dev/null
		
	cp -ar $I_MATIK_PATH/support/freetz/patches/dl-toolchains_eval.patch "$FREETZ_SSL_HOME_PATH/" 2>/dev/null
	patch -p0 -b < dl-toolchains_eval.patch
	rm -rf "$FREETZ_SSL_HOME_PATH/dl-toolchains_eval.patch" 2>/dev/null

	rm -rf "$FREETZ_SSL_HOME_PATH/config/mod/dl-toolchain.in_neu" 2>/dev/null
	cp -ar $FREETZ_SSL_HOME_PATH/config/mod/dl-toolchain.in "$FREETZ_SSL_HOME_PATH/config/mod/dl-toolchain.in_neu" 2>/dev/null
	
	if [[ ! -e dl/tools-user_version.tar.xz ]]; then

			
		rm -rf "$FREETZ_SSL_HOME_PATH/config/mod/tools/make/tools-host/tools-host.mk_neu" 2>/dev/null
		cp -ar $FREETZ_SSL_HOME_PATH/tools/make/tools-host/tools-host.mk "$FREETZ_SSL_HOME_PATH/tools/make/tools-host/tools-host.mk_neu" 2>/dev/null
		
		tools/dl-hosttools user_version
		NEU_HASH="$(sha256sum dl/tools-user_version.tar.xz)"
		
		ALTE_VERSION="$(grep '^$(call TOOLS_INIT,' $FREETZ_SSL_HOME_PATH/tools/make/tools-host/tools-host.mk_neu | awk -F',' '{print $2}' | xargs)"
		ALTE_HASH="$(grep '^$(PKG)_HASH:=' $FREETZ_SSL_HOME_PATH/tools/make/tools-host/tools-host.mk_neu | awk -F'=' '{print $2}' | xargs)"
		
		sed -i "s+${ALTE_VERSION}+user_version)+g" $FREETZ_SSL_HOME_PATH/tools/make/tools-host/tools-host.mk_neu
		sed -i "s+$ALTE_HASH+${NEU_HASH:0:64}+g" $FREETZ_SSL_HOME_PATH/tools/make/tools-host/tools-host.mk_neu
		
		cd $FREETZ_SSL_HOME_PATH
		tools/dl-toolchains_make user_version all
		tools/dl-toolchains_eval user_version all
									
	elif [[ ! -d dl/tools-user_version.tar.xz ]]; then
	echo -e "${GREEN}You already have the latest toolchains. Therefore, no new ones are currently being created..${NC}" 1>&2
	fi
		rm -f $FREETZ_SSL_HOME_PATH/tools/dl-toolchains_make 2>/dev/null
		mv $FREETZ_SSL_HOME_PATH/tools/dl-toolchains_make.orig $FREETZ_SSL_HOME_PATH/tools/dl-toolchains_make 2>/dev/null
		
		rm -f $FREETZ_SSL_HOME_PATH/toolchain/make/download-toolchain.mk 2>/dev/null
		mv $FREETZ_SSL_HOME_PATH/toolchain/make/download-toolchain.mk.orig $FREETZ_SSL_HOME_PATH/toolchain/make/download-toolchain.mk 2>/dev/null
			
		rm -f $FREETZ_SSL_HOME_PATH/tools/dl-toolchains_eval 2>/dev/null
		mv $FREETZ_SSL_HOME_PATH/tools/dl-toolchains_eval.orig $FREETZ_SSL_HOME_PATH/tools/dl-toolchains_eval 2>/dev/null
		
		mkdir -p $I_MATIK_PATH/eigene_toolchains/tools/make/tools-host
		cp -ar $FREETZ_SSL_HOME_PATH/tools/make/tools-host/tools-host.mk_neu "$I_MATIK_PATH/eigene_toolchains/tools/make/tools-host/tools-host.mk" 2>/dev/null
		mkdir -p $I_MATIK_PATH/eigene_toolchains/config/mod/
		cp -ar $FREETZ_SSL_HOME_PATH/config/mod/dl-toolchain.in_neu "$I_MATIK_PATH/eigene_toolchains/config/mod/dl-toolchain.in" 2>/dev/null
	done;			
#end point this shows you how long it took him to create the images	    
finish=$(date +"%s")	# build finished time
timediff=$(($finish-$beginbs))	# build time
[[ $COUNT > 1 ]] && printf "\n${GREEN}${BOX_NAME} SSL ${SSL_VERSION}${NC} build finished in $(($timediff / 60)) minutes and $(($timediff % 60)) seconds. ${YELLOW}<- end time $(date +"%Y-%m-%d %H:%M:%S")${NC}\n"
$I_MATIK_VERSION	# show i-matik disclaimer

